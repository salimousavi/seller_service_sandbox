openapi: 3.0.0
info:
    title: 'Seller Services API'
    description: "This project is an <b>enhancement of the Digikala Marketplace API</b>. Its main goal is providing an API-based solution for Developers useful for implementing new Applications To improve Digikala Sellers Business. <br><br>To use Sandbox APIs, first you should know that sandbox APIs dont validate and use your RequestBody, query-param or header inputs. it just return a Mock data as response based on your requested HTTP code. you must define which HTTP code you want to get in <b>X-Response-Code</b> header. this header is ONLY defined for sandbox and its not useful for real APIs. Just define it as your need and other required values (some of the parameters are required. fill them with fake data). <br>For More Information (Client Registration, Issues, Bugs and suggestions), please contact us.\n### API count: 104"
    version: 1.0.0
    contact: { email: Marketplace-API@digikala.com }
servers:
    - { url: 'http://localhost:8000', description: 'Seller Services Sandbox (Local Mode)' }
paths:
    /api/v3/: { get: { tags: ['Healthcheck (1)'], summary: '', description: 'Return service details and settings.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: Undefined }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/auth/scopes: { get: { tags: ['Authentication (5)'], summary: '', description: 'List of <b>Scopes</b>.<br>This API shows all scopes that are defined in this service and can be used, but it does <b>NOT</b> mean it is available for your application.<br>If you don''t have a scope and your application need it, contact the support team for it', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ScopeListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { key: { type: string, description: 'scope identification key. use this in seller redirection to digikala for getting access', example: variant }, title: { type: string, description: 'The scope title in Persian', example: 'مدیریت تنوع و قیمت‌گذاری' }, description: { type: string, description: 'The scope definition in persian', example: 'امکان مشاهده و ویرایش اطلاعات مدیریت تنوع و قیمت‌گذاری پنل شما را خواهد داشت' }, access: { type: string, description: 'Define Access Level. "write" is for all APIs, but the "read" is for GET APIs', example: write, enum: [write, read] } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/auth/scopes/{client_code}': { get: { tags: ['Authentication (5)'], summary: '', description: 'List of available Scopes for <b>your Application</b>. This API return a list of scopes that your application is allowed to use', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: client_code, description: 'your Application identifier', required: true, example: sa3123scdacd@sad, schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ClientAvailableScopeListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { key: { type: string, description: 'scope identification key. use this in seller redirection to digikala for getting access', example: variant }, title: { type: string, description: 'The scope title in Persian', example: 'مدیریت تنوع و قیمت‌گذاری' }, description: { type: string, description: 'The scope definition in Persian ', example: 'امکان مشاهده و ویرایش اطلاعات مدیریت تنوع و قیمت‌گذاری پنل شما را خواهد داشت' }, access: { type: string, description: 'Define Access Level. "write" is for all APIs, but the "read" is for GET APIs', example: write, enum: [write, read] } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/auth/token: { post: { tags: ['Authentication (5)'], summary: '', description: 'Generate Access and Refresh Token.<br>After seller confirmed your application access, will be redirected back to your application with an <b>authorization_code</b>. you should decrypt the code and use it in this route to activate your access to seller resource', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { authorization_code: { type: string, example: hH23dac@sadaflFdffa/sdDasAdoNQqwdsad12312rf459sa, description: 'Generated code when seller approved your application access request and redirected back' } }, required: [authorization_code] }, example: { authorization_code: hH23dac@sadaflFdffa/sdDasAdoNQqwdsad12312rf459sa } } } }, responses: { 200: { description: ClientCreateTokenForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { access_token: { type: string, example: eyJ0eXSiOiJKV1QiLCJjbGciOiJIUzM5nCJ9.eyJ0b2tlbl9pZCI6OSwiY2xZZW59X2NvZGUiOiJWdk9aNUxaNkx6dWVWTHFIVEY4TCIsImV4cCI6MTcyMzU4NDg1N30.QSU8llz4AwJTH-EJnPW4GQMfjnAu0m8Nh3sM9kkSIx_sCdm6rO8VeT5uVHU69reF }, refresh_token: { type: string, example: WQ098gF5PG3salmqewqvfbgxzzgTgAmWvkrQaWkgnpiqky1KAoqnxunQBz09Xc5UI1eg9tSo1h6k1 } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { authorization_code: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/auth/refresh-token: { post: { tags: ['Authentication (5)'], summary: '', description: 'Generate New Access Token.<br> After your Access token got expired, you can get new one by your Refresh Token and expired access token', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { access_token: { type: string, example: eyJ0eXSiOiJKV1QiLCJjbGciOiJIUzM5nCJ9.eyJ0b2tlbl9pZCI6OSwiY2xZZW59X2NvZGUiOiJWdk9aNUxaNkx6dWVWTHFIVEY4TCIsImV4cCI6MTcyMzU4NDg1N30.QSU8llz4AwJTH-EJnPW4GQMfjnAu0m8Nh3sM9kkSIx_sCdm6rO8VeT5uVHU69reF, description: 'Your (expired) Access token in JWT format' }, refresh_token: { type: string, example: WQ098gF5PG3salmqewqvfbgxzzgTgAmWvkrQaWkgnpiqky1KAoqnxunQBz09Xc5UI1eg9tSo1h6k1, description: 'your Refresh Token' } }, required: [access_token, refresh_token] }, example: { access_token: eyJ0eXSiOiJKV1QiLCJjbGciOiJIUzM5nCJ9.eyJ0b2tlbl9pZCI6OSwiY2xZZW59X2NvZGUiOiJWdk9aNUxaNkx6dWVWTHFIVEY4TCIsImV4cCI6MTcyMzU4NDg1N30.QSU8llz4AwJTH-EJnPW4GQMfjnAu0m8Nh3sM9kkSIx_sCdm6rO8VeT5uVHU69reF, refresh_token: WQ098gF5PG3salmqewqvfbgxzzgTgAmWvkrQaWkgnpiqky1KAoqnxunQBz09Xc5UI1eg9tSo1h6k1 } } } }, responses: { 200: { description: ClientRefreshTokenForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { access_token: { type: string, example: eyJ0eXSiOiJKV1QiLCJjbGciOiJIUzM5nCJ9.eyJ0b2tlbl9pZCI6OSwiY2xZZW59X2NvZGUiOiJWdk9aNUxaNkx6dWVWTHFIVEY4TCIsImV4cCI6MTcyMzU4NDg1N30.QSU8llz4AwJTH-EJnPW4GQMfjnAu0m8Nh3sM9kkSIx_sCdm6rO8VeT5uVHU69reF } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { access_token: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, refresh_token: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/auth/decrypt-code: { post: { tags: ['Authentication (5)'], summary: '', description: '(ONLY USE FOR TEST) decrypt auth_code with a valid private_key', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { authorization_code: { type: string }, private_key: { type: string } }, required: [authorization_code, private_key] }, example: { authorization_code: daldnadosdasndasdasdfnuwe, private_key: '-----BEGIN RSA PRIVATE KEY-----' } } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/search/v2: { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Based on search keyword and other filters prepared, this API gives data about products that are currently created on Digikala and seller might want to sell same one', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: 'search[keyword]', description: 'search by product name', required: 'true', example: null, schema: { type: string } }, { in: query, name: 'search[categories]', description: 'search by product category ids', required: false, example: null, schema: { type: option } }, { in: query, name: 'search[brands]', description: 'search by product brand ids', required: false, example: null, schema: { type: option } }, { in: query, name: 'search[types]', description: 'search by product type ids', required: false, example: null, schema: { type: option } }, { in: query, name: 'search[colorPalettes]', description: 'search by color palette ids', required: false, example: null, schema: { type: option } }, { in: query, name: 'search[statuses]', description: 'search by product statuses', required: false, example: null, schema: { type: option, enum: [marketable, coming_soon, stop_production] } }, { in: query, name: 'search[fake]', description: 'search if product is fake or original', required: false, example: null, schema: { type: bool } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductSearchListViewV2, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, example: 12345, description: 'product id' }, title: { type: string, example: 'شارژر دیواری باسئوس  مدل Speed mini', description: 'product title' }, status: { type: string, example: marketable, description: 'product status', enum: [marketable, coming_soon, stop_production] }, min_price: { type: integer, example: 1230000, description: 'minimum allowable selling price' }, commission: { type: object, properties: { canSell: { type: boolean, description: 'is product sellable by seller or not', example: false }, type: { type: string, example: limitation, description: 'reason of not be sellable product. limitation is because of some required document or etc. cheque_non_digikala is because the product is only sellable by cheque (not cash)', enum: [limitaion, cheque_non_digikala] }, commission: { type: double, example: 0.05, description: 'digikala commission percentage of the product' }, message: { type: array, description: 'reason of not sellable product', items: { type: string, example: 'فروش این کالا به یکی از دلایل زیر برای شما محدود شده است:</br>این کالا نیاز به <a href="https://selleracademy.digikala.com/%da%af%d8%b1%d9%88%d9%87-%d9%87%d8%a7%db%8c-%da%a9%d8%a7%d9%84%d8%a7%db%8c%db%8c-%da%a9%d9%87-%d8%a8%d8%b1%d8%a7%db%8c-%d9%81%d8%b1%d9%88%d8%b4-%d9%86%db%8c%d8%a7%d8%b2-%d8%a8%d9%87-%d9%85%d8%af%d8%b1/">مجوز</a> دارد، این کالا به دلایل <a href="https://selleracademy.digikala.com/%D8%A7%D9%82%D9%84%D8%A7%D9%85-%D9%85%D9%85%D9%86%D9%88%D8%B9%D9%87/">دیگری</a> محدود شده است.' } } } }, market_price: { type: integer, example: 1240000, description: 'current avg pricing for the product' }, image_src: { type: string, description: 'product main image - small size', example: 'https://dkstatics-public.digikala.com/digikala-products/85f13b62aba9a9ed31d2a02bf6e1e7fa_1628084094.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60' }, price_type: { type: object, description: 'pricing rules. it shows that if product price is fixed (regulated, printed) or changeable (recommended)', enum: [printed, regulated, recommended], properties: { recommended: { type: string, description: 'price_type in persian', example: پیشنهادی } } }, color_type: { type: string, description: 'shows that variants in this product can be priced and sell separately by their color, size or none', example: colored, enum: [no_color_no_size, colored, sized] }, number_of_sellers: { type: integer, example: 13, description: 'other sellers count that sell this product' }, is_selling: { type: boolean, example: false, description: 'define if seller selling this product right now or not' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/search/suggestion/v2: { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Suggest Products to seller to sell based on the searched keyword. This is the first step of content creation process. it you want to add new product, first search it with this API. if found what you want, ', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: 'search[keyword]', description: 'a word(mostly persian) that describe the product name you have for sell', required: false, example: null, schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductSearchSuggestionListViewV2, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { categories: { type: array, description: 'show top keywords with their categories that has been found', items: { type: object, properties: { keyword: { type: string, description: 'founded product name', example: کوتون }, category: { type: object, description: 'category of founded product', properties: { id: { type: integer, example: 1234 }, title_fa: { type: string, description: 'category name in persian', example: 'تی شرت مردانه' }, title_en: { type: string, example: 'MEN TEE-SHIRTS', description: 'category name in english' }, code: { type: string, example: men-tee-shirts, description: 'category slug' } } } } } }, auto_complete: { type: array, description: 'items that can be useful for seller search keyword auto-complete', items: { type: object, properties: { keyword: { type: string, example: کوتون } } } } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/product-creation/be-seller/{product_id}': { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: null, parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: product_id, description: null, required: true, example: null, schema: { type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: BeingProductSellerView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { name: { type: string, example: 'شارژر تبلت دل', description: 'product name' }, brand: { type: string, example: دل, description: 'product brand' }, productId: { type: integer, example: 1234, description: 'product id' }, commission: { type: object, description: 'some data about product sales', properties: { canSell: { type: boolean, example: true, description: 'show if seller can sell this product or not' }, commission: { type: double, example: 0.055, description: 'rate of digikala commission from selling this product' } } }, productURL: { type: string, example: 'https://digikala.com/product/dkp-1234/', description: 'product page link' }, referencePrice: { type: integer, example: 10000000, description: 'product reference price. that is a base amount for pricing it' }, productImage: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-products/2567.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60', description: 'product image link' }, fulfillmentAndDeliveryCost: { type: object, description: '', properties: { factor: { type: integer, example: 1, description: 'nothing important' }, minimum_cost: { type: integer, example: 100000, description: 'this price is the minimum amount of fulfillment and delivery cost of digikala (IRR)' }, maximum_cost: { type: integer, example: 800000, description: 'this price is the maximum amount of fulfillment and delivery cost of digikala (IRR)' } } }, category: { type: object, description: 'product category details', properties: { id: { type: integer, example: 1234, description: 'category id' }, title: { type: string, example: 'شارژر تبلت و موبایل', description: 'category name' }, theme: { type: string, example: colored, description: 'shows what is the type of variants in this category.', enum: [no_color_no_size, colored, sized] } } }, site: { type: string, example: digikala, description: 'sales channels of this product' }, product_dimension: { type: object, description: 'dimensions of product', properties: { width: { type: integer, example: 11, description: 'in CM' }, length: { type: integer, example: 22, description: 'in CM' }, height: { type: integer, example: 6, description: 'in CM' }, weight: { type: integer, example: 350, description: 'in gram' } } }, price_type: { type: string, example: recommended, description: 'pricing rules. it shows that if product price is fixed (regulated, printed) or changeable (recommended)', enum: [printed, regulated, recommended] } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { productId: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/product-creation/search/category/v2/{keyword}': { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'This api find and show data of related categories for searched category_id or Keyword', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: keyword, description: 'category title OR id', required: true, example: null, schema: { type: 'string, integer' } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductCategorySearchListViewV2, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, description: 'category id', example: 6351 }, text: { type: string, description: 'category name (fa)', example: 'ظرف مربا و عسل' }, leaf: { type: boolean, description: 'is it the last (lowest level) category in a tree?', example: true } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/product-creation/category/{category_id}/validation': { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'This API check if a Category is Restricted for seller to sale product or not. If not, it returns some data that is required to create product. it mostly used for 2nd step of product creation', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: category_id, description: 'Leaf (lowest level) category id', required: true, example: null, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductCreationStep2ObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { isValid: { type: boolean, example: true, description: 'is the category open to sell for seller or not' }, errors: { type: array, description: 'list of error message, if the ''isValid'' parameter is false', items: { type: string, example: 'برای فروش در این گروه کالایی نیاز به مدرک ایکس است' } }, bind: { type: object, description: 'if the category is valid to sell, there will be a lot of category related data here required for creating a product', properties: { brands: { type: array, description: 'list of brands assigned to selected category', items: { type: object, properties: { id: { type: string, example: 123, description: 'brand id' }, text: { type: string, example: 'متفرقه Miscellaneous', description: 'brand (visible) title' }, title_fa: { type: string, example: متفرقه, description: 'brand title (fa)' }, title_en: { type: string, example: Miscellaneous, description: 'brand title (en)' }, logo_id: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-brands/d37a7e9b8046132d4_1603699076.png', description: 'brand logo url' } } } }, category_product_types: { type: array, description: 'list of product types that is assigned to selected category', items: { type: object, properties: { value: { type: string, example: '123', description: 'product type id' }, text: { type: string, example: 'تابلو چارت', description: 'product type title' } } } }, product_classes: { type: array, description: 'list of product classes that is assigned to selected category', items: { type: object, properties: { value: { type: string, example: '123', description: 'product class id' }, text: { type: string, example: 'آرجی‌بی RGB', description: 'product class title' } } } }, divisions: { type: array, description: 'list of divisions assigned to the selected category (useful for creating product title)', items: { type: string, example: 'division title' } }, guideline: { type: object, description: 'some hint and guidance for the selected category', properties: { category_selection: { type: object, description: '', properties: { video: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-brands/80005e48c', description: 'video about category selection' }, short_description: { type: string, example: 'برای انتخاب گروه، لطفا نمونه مشابه کالای خود را در سایت دیجیکالا جست و جو کنید و چنانچه کالای یافت شده با کالایی که قصد درج آن را دارید یکسان بود، همان گروه را برای درج کالا انتخاب کنید.', description: 'hint about category selection' } } }, attributes: { type: object, description: '', properties: { video: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-brands/80005e48c', description: 'video about attribute selection' }, short_description: { type: string, example: 'توضیح کوتاه', description: 'short hint about attributes' }, items: { type: array, description: 'attribute item', items: { type: object, properties: { title: { type: string, example: 'مشخصات فنی نوشتاری', description: 'title of attribute item' }, content: { type: string, example: "<p>لطفا در هنگام نوشتن مشخصات فنی، به نکات زیر دقت کنید:</p>\n\n<p>1- &nbsp; &nbsp; تمام مشخصات فنی ذکر شده در این قسمت باید با مشخصات کالا در تصاویر، عنوان و شرح کالا یکسان باشد در صورت مغایرت این اطلاعات با هم، کالای شما در زمان بررسی رد می شود.<br />\n2- &nbsp; &nbsp;مشخصات فنی وارد شده باید دقیقا مطابق با کالایی باشد که بفروش میرسانید و در صورت هر گونه مغایرت، کالا به این دلیل مرجوع و فروشنده جریمه می شود.&nbsp;<br />\n3- &nbsp; &nbsp; املا و نگارش کلمات باید صحیح باشد و هیچ غلط املایی در آن وجود نداشته باشد.<br />\n4- &nbsp; &nbsp;در مشخصات فنی نباید نام فروشگاه، قیمت و گارانتی کالا را بنویسید.<br />\n5- &nbsp; &nbsp; مشخصات فنی، مشخصات دقیقی هستند، بنابراین نباید از عبارات تبلیغاتی و سلیقه ای استفاده کنید.<br />\nمثال: عمر مفید زیاد، ظاهر زیبا و...<br />\n6- &nbsp; &nbsp;اگر مشخصه ی فنی دارای واحد اندازه گیری است، حتما از مطابقت این عدد با واحد اندازه گیری اطمینان حاصل کنید. در صورت مغایرت، احتمال مرجوع شدن کالا زیاد است.<br />\n7- &nbsp; &nbsp; چنانچه کالای درج شده، چند پارچه یا چند تکه است باید مشخصات فنی تمام اجزا را در مشخصات کالا ذکر کنید.</p>", description: 'hint about attribute items' } } } } } }, product_info: { type: object, description: 'some hint about product info (like product badges)', properties: { video: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-brands/80005e48c', description: 'video about product info' }, short_description: { type: string, example: هرچی, description: 'hint about product info' }, items: { type: array, description: 'list of product info items', items: { type: object, properties: { title: { type: string, example: 'نشان غیراصل', description: 'title of product info item' }, content: { type: string, example: "<p>اصالت کالا (نشان غیر اصل): اگر روی کالا برندی وجود دارد که آن محصول توسط آن برند تولید نشده است، باید از نشان غیر اصل استفاده کنید. اگرروی کالا هیچ برندی وجود ندارد، نباید از نشان غیر اصل استفاده کرد و محصول را با برند متفرقه درج کنید.</p>\n\n<p>1- &nbsp; &nbsp;اگر محصول غیراصل است و از نشان غیر اصل استفاده می&zwnj;کنید، نباید هیچ برندی در عنوان کالا ذکر شود.<br />\n2- &nbsp; &nbsp;اگر کالایی نشان غیر اصل نداشته باشد به معنای این است که آن کالا اصل و تولید شده توسط آن برند است. اگر روی این کالا، کالای فیک بفروشید، مشمول جریمه خواهید شد. برای اطلاع بیشتر به این <a href=\"https://www.digikala.com/s/7ilfbc\">لینک</a><strong> </strong> مراجعه کنید.</p>", description: 'hint for product info item' } } } } } }, media: { type: object, description: 'guidance about product media in the selected category', properties: { video: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-brands/80005e48c', description: 'video for media guidance' }, short_description: { type: string, example: 'توضیح کوتاه', description: 'hint for media guidance' }, items: { type: array, description: 'list of media items with specific guidance', items: { type: object, properties: { title: { type: string, example: 'تصویر آلبوم', description: 'media item title' }, content: { type: string, example: "<p>تصاویر آلبوم برای نمایش زوایا و کاربرد کالا به مشتری است.<br />\n1- &nbsp; &nbsp;در هیچ کدام از تصاویر آلبوم نباید هیچ لوگو و واترمارکی وجود داشته باشد.<br />\n2- &nbsp; &nbsp;در تصاویر آلبوم نباید هیچ آدرس سایت، شماره تلفن و نشانی شبکه ها اجتماعی وجود داشته باشد. (لطفا اگر این موارد روی کالا یا بسته بندی وجود دارد طوری عکاسی کنید تا این موارد در تصاویر دیده نشود.)<br />\n3- &nbsp; &nbsp;در تصاویر آلبوم، طرح های مختلف یک کالا را قرار ندهید، برای هر طرح باید یک کالای جداگانه درج شود.<br />\n4- &nbsp; &nbsp;دقت کنید که بین هیچ کدام از تصاویر نباید مغایرتی وجود داشته باشد.</p>", description: 'hint for media item' } } } } } } } }, category_data: { type: object, description: 'details of selected category', properties: { categoryTheme: { type: string, example: no_color_no_size, description: 'theme of product variants in this category', enum: [no_color_no_size, colored, sized] }, categoryThemeTranslated: { type: string, example: 'بدون رنگ یا سایز', description: 'theme name FA' }, categoryTitle: { type: string, example: 'نقشه چاپی', description: 'selected category name FA' } } }, allow_fake: { type: boolean, example: true, description: 'is it possible to create fake products in this category or NOT' }, brand_other_id: { type: integer, example: 123, description: '' }, show_colors: { type: boolean, example: false, description: 'is the product in the selected category needs to assign color or not' }, dimension_level: { type: string, example: item, description: '' }, dimension_config: { type: object, description: 'configurations related to product dimension in the selected category', properties: { length: { type: object, description: 'range of valid product length', properties: { min: { type: integer, example: 1, description: 'minimum valid product length in this category' }, max: { type: integer, example: 200, description: 'maximum valid product length in this category' } } }, width: { type: object, description: 'range of valid product width', properties: { min: { type: integer, example: 1, description: 'minimum valid product width in this category' }, max: { type: integer, example: 200, description: 'maximum valid product width in this category' } } }, height: { type: object, description: 'range of valid product height', properties: { min: { type: integer, example: 1, description: 'minimum valid product height in this category' }, max: { type: integer, example: 200, description: 'maximum valid product height in this category' } } }, weight: { type: object, description: 'range of valid product weight', properties: { min: { type: integer, example: 1, description: 'minimum valid product weight in this category' }, max: { type: integer, example: 200000, description: 'maximum valid product weight in this category' } } } } }, general_mefa: { type: object, description: 'list of general MEFA (شناسه عمومی کالا) details for the products in selected category. key is general_mefa_id and value is general mefa detail', properties: { general_mefa_id: { type: object, description: '', properties: { value: { type: integer, example: 17242, description: 'general mefa identifier' }, text: { type: string, example: '2720000114030(اطلس چاپی و مکتوب - شناسه عمومی تولید داخل)', description: 'general mefa description' }, general_id: { type: string, example: 2720000114030, description: 'general mefa number' } } } } }, category_mefa_type: { type: string, example: general, description: 'type of MEFA (شناسه کالا) for selected category', enum: [none, general, exclusive] }, statuses: { type: array, description: 'list of available product statuses in selected category', items: { type: object, properties: { value: { type: string, example: marketable, description: 'status key' }, text: { type: string, example: 'قابل فروش', description: 'status title' }, selected: { type: boolean, example: true, description: 'is this status selected or not' } } } }, platforms: { type: array, description: 'list of available selling platforms for the products in this category', items: { type: object, properties: { value: { type: string, example: digikala, description: 'platform key' }, text: { type: string, example: دیجیکالا, description: 'platform title' }, selected: { type: boolean, example: true, description: 'is this platform selected or not' } } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { category_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/product/detail/validation: { post: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Add Valid Product details', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { category_id: { type: integer, example: 1234, description: 'product leaf category id' }, division_id: { type: integer, example: 1234, description: 'product division id. Division is a subset of similar products in a leaf category that have some similar attributes' }, model: { type: string, example: 'S22 fan edition', description: 'It''s exactly the model of the product' }, brand_id: { type: integer, example: Samsung, description: 'Brand of the product. it define the product producer brand or if it does not have one, it can be miscellaneous' }, product_type_ids: { type: array, items: { type: integer, example: 1234 }, required: false, description: 'list of product type ids, Product Type is a subset of similar products in a leaf category' }, color_id: { type: integer, example: 1234, description: 'color id of the product' }, is_iranian: { type: boolean, example: true, description: 'if the product is produced in Iran or not (The origin of the product)' }, product_classes: { type: array, items: { type: integer, example: 123 }, required: false, description: 'Its a list of the badge/classes that a product have' }, fake: { type: boolean, example: true, description: 'Is product produced by the Brand or not (is it a copy of main product or etc.)' }, fake_reasons: { type: array, items: { type: integer, example: 1234 }, required: false, description: 'list of fake reason ids, Product can be fake (not original). here we specify why it is fake, so we consider it in customer return cases' }, general_mefa_id: { type: string, example: '2132114141312321', description: 'شناسه عمومی کالا' }, exclusive_mefa_id: { type: string, example: '2132114141312321', description: 'شناسه اختصاصی کالا' }, package_width: { type: integer, example: 12, description: 'Width of product packaging in centimeter (product main package, not the Post package or anything else)' }, package_height: { type: integer, example: 12, description: 'Height of product packaging in centimeter (product main package, not the Post package or anything else)' }, package_length: { type: integer, example: 12, description: 'Length of product packaging in centimeter (product main package, not the Post package or anything else)' }, package_weight: { type: integer, example: 12, description: 'Weight of product packaging in gram (product main package, not the Post package or anything else)' }, description: { type: string, example: 'این محصول از توانایی های عجیبی برخوردار است ', description: 'A comprehensive explanation (In Farsi) of the product, its usage and etc.' }, disadvantages: { type: array, items: { type: string, example: 'محصول بد، محصول ضعیف، باطری ضعیف ' }, required: false, description: 'a list of advantages of the product, separated by comma' }, advantages: { type: array, items: { type: string, example: 'محصول خوب، محصول عالی، باطری قوی ' }, required: false, description: 'a list of disadvantages of the product, separated by comma' }, draft_product_id: { type: integer, example: 1234, description: 'Draft product is a product that it''s data is NOT completed yet' } }, required: [category_id, brand_id, is_iranian] }, example: { category_id: 1234, division_id: 1234, model: 'S22 fan edition', brand_id: Samsung, product_type_ids: [1234], color_id: 1234, is_iranian: true, product_classes: [123], fake: true, fake_reasons: [1234], general_mefa_id: '2132114141312321', exclusive_mefa_id: '2132114141312321', package_width: 12, package_height: 12, package_length: 12, package_weight: 12, description: 'این محصول از توانایی های عجیبی برخوردار است ', disadvantages: ['محصول بد، محصول ضعیف، باطری ضعیف '], advantages: ['محصول خوب، محصول عالی، باطری قوی '], draft_product_id: 1234 } } } }, responses: { 200: { description: ProductCreationStep2ValidationForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { is_valid: { type: boolean, example: true, description: 'is the category open to sell for seller or not' }, errors: { type: array, description: 'list of error message, if the ''isValid'' parameter is false', items: { type: string, example: 'برای فروش در این گروه کالایی نیاز به مدرک ایکس است' } }, bind: { type: object, description: 'if the category is valid to sell, there will be a lot of category related data here required for creating a product', properties: { vat: { type: integer, example: 9, description: 'the percentage of product Value-Added-Tax' }, product_nature: { type: string, example: non_fmcg, description: 'the nature of product', enum: [non_fmcg, non_food, food, fresh, frozen, non_inventory] }, sensitivity: { type: string, example: normal, description: 'the status of product selling sensitivity', enum: [normal, sensitive] }, status: { type: string, example: marketable, description: 'product selling status', enum: [marketable, coming_soon, stop_production] }, active: { type: boolean, example: true, description: 'product activation status' }, active_digistyle: { type: boolean, example: false, description: 'product activation status in digistyle channel' }, product_type: { type: string, example: product, description: 'product type', enum: [product, giftcard, no_direct_order, dk_electronic_gift_card, donation, irancell_simcard, cheque] }, site: { type: string, example: digikala, description: 'product selling channel', enum: [digikala, digistyle] }, platforms: { type: array, description: 'list of product selling platforms', items: { type: string, example: digikala, description: 'selling platform', enum: [digikala, fresh] } }, fake_reasons: { type: array, description: 'the reasons of why product is a fake product', items: { type: string, example: '', description: 'fake reason' } }, category_id: { type: integer, example: 9882, description: 'product leaf category id' }, division_id: { type: integer, example: 123, description: 'product division id' }, model: { type: string, example: زیررررو, description: 'product model' }, brand_id: { type: integer, example: 719, description: 'product brand id' }, product_type_ids: { type: array, description: 'list of product type ids', items: { type: integer, example: 19709 } }, is_iranian: { type: boolean, example: true, description: 'is product originally manufactured in iran' }, fake: { type: boolean, example: false, description: 'is product fake or original' }, general_mefa_id: { type: integer, example: 17242, description: 'product general MEFA id (شناسه عمومی کالا)' }, exclusive_mefa_id: { type: string, example: '', description: 'product exclusive MEFA id (شناسه اختصاصی کالا)' }, package_width: { type: integer, example: 123, description: 'product packaging width (mm)' }, package_height: { type: integer, example: 123, description: 'product packaging height (mm)' }, package_length: { type: integer, example: 123, description: 'product packaging length (mm)' }, package_weight: { type: integer, example: 123, description: 'product packaging width (gram)' }, description: { type: string, example: 'شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست ', description: 'product description' }, advantages: { type: array, description: 'list of product advantages', items: { type: string, example: خووبه } }, disadvantages: { type: array, description: 'list of product disadvantages', items: { type: string, example: بدددده } } } }, draft_product_id: { type: integer, example: 1839, description: 'draft product id (draft products are products that are not completely created)' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { category_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, brand_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, is_iranian: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/draft-product/count: { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Return Number Of Seller Draft Products.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DraftProductCountObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { number_of_drafts: { type: integer, description: 'number of seller products that remain in draft status', example: 54 } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/product-creation/draft-product/{draft_product_id}': { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Return a draft product entity', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: draft_product_id, description: null, required: true, example: null, schema: { type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DraftProductObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { id: { type: integer, example: 123, description: 'draft product id' }, category_id: { type: integer, example: 123, description: 'category id' }, category_name: { type: string, example: 'نقشه چاپی', description: 'category name' }, division_id: { type: integer, example: 123, description: 'division id' }, model: { type: string, example: زیررررو, description: 'product model' }, brand_id: { type: integer, example: 123, description: 'brand id' }, brand_name: { type: string, example: متفرقه, description: 'brand name FA' }, product_type_ids: { type: array, description: 'list of product type ids', items: { type: integer, example: 19709, description: 'product type id' } }, is_iranian: { type: boolean, example: true, description: 'is product originally manufactured in IRAN or not' }, product_classes: { type: array, description: 'list of product class ids', items: { type: string, example: 2 } }, fake: { type: boolean, example: false, description: 'is product fake or original' }, general_mefa_id: { type: integer, example: 17242, description: 'product general MEFA id (شناسه عمومی کالا)' }, exclusive_mefa_id: { type: string, example: '', description: 'product exclusive MEFA id (شناسه اختصاصی کالا)' }, package_width: { type: integer, example: 123, description: 'product packaging width (mm)' }, package_height: { type: integer, example: 123, description: 'product packaging height (mm)' }, package_length: { type: integer, example: 123, description: 'product packaging length (mm)' }, package_weight: { type: integer, example: 123, description: 'product packaging width (gram)' }, platforms: { type: array, description: 'list of product selling platforms', items: { type: string, example: digikala, description: 'selling platform', enum: [digikala, fresh] } }, description: { type: string, example: 'شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست ', description: 'product description' }, advantages: { type: array, description: 'list of product advantages', items: { type: string, example: خووبه } }, disadvantages: { type: array, description: 'list of product disadvantages', items: { type: string, example: بدددده } }, title_en: { type: string, example: 'نام کالا', description: 'product title EN' }, title_fa: { type: string, example: 'نام کالا', description: 'product title FA' }, width: { type: integer, example: 1, description: 'product width (mm)' }, height: { type: integer, example: 1, description: 'product height (mm)' }, length: { type: integer, example: 1, description: 'product length (mm)' }, weight: { type: integer, example: 1, description: 'product weight (gram)' }, remaining_day: { type: integer, example: 29, description: 'remaining days of draft product(in day). After this amount draft product will be removed' }, site: { type: string, example: digikala, description: 'product selling channel', enum: [digikala, digistyle] }, status: { type: string, example: marketable, description: 'product selling status', enum: [marketable, coming_soon, stop_production] }, product_type: { type: string, example: product, description: 'product type', enum: [product, giftcard, no_direct_order, dk_electronic_gift_card, donation, irancell_simcard, cheque] }, product_nature: { type: string, example: non_fmcg, description: 'the nature of product', enum: [non_fmcg, non_food, food, fresh, frozen, non_inventory] }, active: { type: boolean, example: true, description: 'product activation status' }, active_digistyle: { type: boolean, example: false, description: 'product activation status in digistyle channel' }, sensitivity: { type: string, example: normal, description: 'the status of product selling sensitivity', enum: [normal, sensitive] }, vat: { type: integer, example: 9, description: 'the percentage of product Value-Added-Tax' }, next_step: { type: array, description: 'show the next steps of product creation that is not done yet for this draft product', items: { type: string, example: 'step title' } }, step: { type: string, example: step_basic_info, description: 'current draft product step' }, score: { type: object, description: 'the draft product content score. shows how strong is the product content', properties: { score_details: { type: object, description: 'details of the draft product content score', properties: { category: { type: object, description: 'score of category related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'seller score for this item' } } }, brand: { type: object, description: 'score of brand related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'seller score for this item' } } }, type: { type: object, description: 'score of product type related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'product score for this item' } } }, model: { type: object, description: 'score of product model related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'product score for this item' } } }, originality: { type: object, description: 'score of manufacturer related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'product score for this item' } } }, division: { type: object, description: 'score of division related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } }, mefa: { type: object, description: 'score of mefa (شناسه کالا) related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'product score for this item' } } }, description: { type: object, description: 'score of description related contents', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 2, description: 'product score for this item' } } }, advantage: { type: object, description: 'score of advantages related contents', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 2, description: 'product score for this item' } } }, disadvantage: { type: object, description: 'score of disadvantages related contents', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 2, description: 'product score for this item' } } }, attribute_1597: { type: object, description: 'score of attributes related contents. key of this object shows the attribute id (and for other attributes there will be another object', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } }, title_fa: { type: object, description: 'score of title FA related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } }, title_en: { type: object, description: 'score of title EN related contents', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } }, photo: { type: object, description: 'score of photo related contents', properties: { max: { type: integer, example: 6, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } } } }, total: { type: integer, example: 12, description: 'total product content score' }, max: { type: integer, example: 31, description: 'highest possible product content score' }, percent: { type: integer, example: 38, description: 'total product content score in percentage' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { draft_product_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/product-creation/{draft_product_id}/auto-title': { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Get Title Suggestion Data After product details added to draft', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: draft_product_id, description: null, required: true, example: null, schema: { type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductCreationAutoTitleSuggestionObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { title_fa: { type: string, example: 'کتاب مدل زیروووو', description: 'suggested title by system' }, title_en: { type: string, example: '', description: 'nothing yet' }, hint: { type: object, description: 'shows the title formula in this category will be defined by system', properties: { hint_fa: { type: string, example: 'ماهیت کالا + برند کالا + مدل کالا', description: 'title formula for FA title' }, hint_en: { type: string, example: '', description: 'nothing yet' } } }, enable_edit: { type: boolean, example: true, description: 'is it possible to edit suggested title by system or not' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { draft_product_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/auto-title/save: { post: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Validate Title', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { draft_product_id: { type: integer, example: 1234, description: 'draft product id. Draft product is a product that it''s data is NOT completed yet' }, title_fa: { type: string, example: 'لباس زیر مردانه برند کالوین کلین مدل m22', description: 'The Farsi title that is generated by automatic title generator API or modified by you' }, title_en: { type: string, example: 'Men''s underwear Calvin Klein m22', description: 'The English title that is generated by automatic title generator API or modified by you' } }, required: [draft_product_id, title_fa] }, example: { draft_product_id: 1234, title_fa: 'لباس زیر مردانه برند کالوین کلین مدل m22', title_en: 'Men''s underwear Calvin Klein m22' } } } }, responses: { 200: { description: ProductCreationSaveTitleValidationForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { isValid: { type: boolean, example: true, description: 'is title valid or not' }, data: { type: object, description: 'if title is valid, below data will be shown here', properties: { title_fa: { type: string, example: 'کتاب مدل زیرووو', description: 'assigned product title FA' }, title_en: { type: string, example: 'Book Zirooo model', description: 'assigned product title EN' }, suggested_title_fa: { type: string, example: 'کتاب مدل زیرو', description: 'system suggested product title FA' }, suggested_title_en: { type: string, example: '', description: 'noting yet' }, url_code: { type: string, example: کتاب-مدل-زیرووو, description: 'title slug' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { title_fa: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, draft_product_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/product-creation/attributes/{category_id}': { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Get Category Attributes', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: category_id, description: null, required: true, example: null, schema: { type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: CategoryAttributesValidatableObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { category_group_attributes: { type: object, description: 'list of attribute groups in the category. Attribute groups are consist of attributes with same characteristic. (keys are attribute group id and value is attribute group detail', properties: { 1904: { type: object, description: 'attribute group data', properties: { group_title: { type: string, example: مشخصات, description: 'title of attribute group' }, attributes: { type: object, description: 'list of attributes in an attribute group. key of objects are attribute id, and value is attribute detail', properties: { 119: { type: object, description: 'attribute detail', properties: { id: { type: integer, example: 123, description: 'attribute id' }, title: { type: string, example: 'سایر توضیحات', description: 'attribute title' }, code: { type: string, example: s1, description: 'specific code for the attribute' }, postfix: { type: string, example: 'سایر توضیحات', description: 'a fixed string that comes after attribute value' }, unit: { type: string, example: سانت, description: 'the measurement unit of the attribute' }, type: { type: string, example: text, description: 'the input type of the attribute (useful for front-side usage)' }, required: { type: boolean, example: false, description: 'is attribute value required or not' }, value: { type: mixed, example: '', description: 'default value of the attribute, if there is any' }, values: { type: array, description: 'Based on attribute type, this field will show list of allowable values for this attribute', items: { type: mixed, example: 'allowable value' } }, hint: { type: string, example: 'در صورت نیاز می‌توانید توضیحاتی مختصر در مورد ویژگی‌های کالا ارائه دهید.', description: 'if exists, it will show attribute guideline' } } }, 1597: { type: object, description: '', properties: { id: { type: integer, example: 123, description: 'attribute id' }, title: { type: string, example: 'سایر توضیحات', description: 'attribute title' }, code: { type: string, example: s1, description: 'specific code for the attribute' }, postfix: { type: string, example: 'سایر توضیحات', description: 'a fixed string that comes after attribute value' }, unit: { type: string, example: سانت, description: 'the measurement unit of the attribute' }, type: { type: string, example: select, description: 'the input type of the attribute (useful for front-side usage)' }, required: { type: boolean, example: false, description: 'is attribute value required or not' }, value: { type: mixed, example: 7070, description: 'default value of the attribute, if there is any' }, values: { type: object, description: 'Based on attribute type, this field will show list of allowable values for this attribute', properties: { 7070: { type: object, description: 'the select input option details', properties: { text: { type: string, example: فارسی, description: 'name of the option (FA)' }, code: { type: string, example: 1, description: 'code of the option' }, selected: { type: boolean, example: false, description: 'is this option selected as default or not' } } } } }, hint: { type: string, example: 'در صورت نیاز می‌توانید توضیحاتی مختصر در مورد ویژگی‌های کالا ارائه دهید.', description: 'if exists, it will show attribute guideline' } } } } } } } } }, attribute_dimensions: { type: boolean, example: false, description: '???' }, dimensions_attribute_postfix: { type: string, example: 'سانتی متر', description: 'its a fixed string that comes after all dimension attributes (like height, length and ...)' }, has_height: { type: boolean, example: false, description: 'Does products in this category take height attribute or not' }, dimensions_attribute: { type: boolean, example: false, description: '???' }, weight_attribute: { type: boolean, example: false, description: 'Does products in this category take weight attribute or not' }, weight_attribute_postfix: { type: string, example: گرم, description: 'if weight attribute exists, this string will be added as its postfix' }, weight_attribute_required: { type: boolean, example: false, description: 'is weight attribute required or not?' }, weight_attribute_reasons: { type: boolean, example: false, description: '???' }, weight_attribute_hint: { type: string, example: '', description: 'guidance about weight attribute' }, dimensions_attribute_required: { type: boolean, example: false, description: 'is dimension required for this category products or not' }, dimensions_attribute_hint: { type: string, example: 'راهنمای ابعاد', description: 'guidance for dimensions input' }, dimension_attribute_multiplier: { type: integer, example: 1, description: '???' }, weight_attribute_multiplier: { type: integer, example: 2, description: '???' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { category_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/attributes: { post: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Validate Attributes through product creation', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { draft_product_id: { type: integer, example: 1234, description: 'draft product id. Draft product is a product that it''s data is NOT completed yet' }, length: { type: double, example: 12.3, description: 'Length of product in centimeter (product itself, not packaging)' }, width: { type: double, example: 12.3, description: 'Width of product in centimeter (product itself, not packaging)' }, height: { type: double, example: 12.3, description: 'Height of product in centimeter (product itself, not packaging)' }, weight: { type: double, example: 12.3, description: 'Weight of product in gram (product itself, not packaging)' }, attributes: { type: array, items: { type: array, items: { type: object, description: 'list of attributes. Attributes are characteristics of a product. products in a category/division need a set of attributes to be defined. each attribute has its own type and acceptable values', properties: { id: { type: integer, description: 'attribute id', example: 123 }, value: { type: [integer, string, boolean, array, object], description: 'attribute value for the product', example: 123 } } } }, required: false, description: 'List of product attributes' } }, required: [draft_product_id] }, example: { draft_product_id: 1234, length: 12.3, width: 12.3, height: 12.3, weight: 12.3, attributes: {  } } } } }, responses: { 200: { description: ArrayApiView }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/images/requests/brand-logo/upload: { post: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Upload Brand Request Logo Image To Temp Storage', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { multipart/form-data: { schema: { type: object, properties: { file: { type: string, format: binary, example: (binary), description: 'The brand image file (jpeg, jpg, png)' } }, required: [file] }, example: {  } } } }, responses: { 200: { description: ContentCreationBrandRequestLogoImageForm, content: { multipart/form-data: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { isValid: { type: boolean, example: true, description: '' }, data: { type: object, description: '', properties: { id: { type: string, example: 4NObd, description: '' }, url: { type: string, example: 'https://dkstatic-public-demo.digikala.com/digikala-products/14d8546b536c1e74fa53ec2203471f5d45_1724103997.jpg?x-oss-process=image/resize,m_fill,h_90,w_90', description: '' }, tempFile: { type: boolean, example: true, description: '' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { multipart/form-data: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { file: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/images/requests/upload: { post: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Upload Content Request Image To Temp Storage', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { multipart/form-data: { schema: { type: object, properties: { file: { type: string, format: binary, example: (binary), description: 'The image file (jpeg, jpg, png)' } }, required: [file] }, example: {  } } } }, responses: { 200: { description: ContentCreationRequestUploadImageForm, content: { multipart/form-data: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { isValid: { type: boolean, example: true, description: '' }, data: { type: object, description: '', properties: { id: { type: string, example: 4NObd, description: '' }, url: { type: string, example: 'https://dkstatic-public-demo.digikala.com/digikala-products/14d8546b536c1e74fa53ec2203471f5d45_1724103997.jpg?x-oss-process=image/resize,m_fill,h_90,w_90', description: '' }, tempFile: { type: boolean, example: true, description: '' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { multipart/form-data: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { file: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/images/upload: { post: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Upload Product Image To Temp Storage', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { multipart/form-data: { schema: { type: object, properties: { file: { type: string, format: binary, example: (binary), description: 'The Product image file in binary (jpeg, jpg, png)' } }, required: [file] }, example: {  } } } }, responses: { 200: { description: ProductCreationUploadImageForm, content: { multipart/form-data: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { isValid: { type: boolean, example: true, description: '' }, data: { type: object, description: '', properties: { id: { type: string, example: 4NObd, description: '' }, url: { type: string, example: 'https://dkstatic-public-demo.digikala.com/digikala-products/14d8546b536c1e74fa53ec2203471f5d45_1724103997.jpg?x-oss-process=image/resize,m_fill,h_90,w_90', description: '' }, tempFile: { type: boolean, example: true, description: '' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/images/ai: { post: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Check Image With AI and return some guidance (if exists)', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { image_id: { type: string, example: 123exasd412, description: 'The uploaded product image id in product creation step. (it is a data in upload response)' }, is_main: { type: boolean, example: true, description: 'Is this image, the main image of product or not' } }, required: [image_id, is_main] }, example: { image_id: 123exasd412, is_main: true } } } }, responses: { 200: { description: ProductCreationImageAIForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { isValid: { type: boolean, example: true, description: '' }, data: { type: array, description: '', items: { type: string, example: 'بک گراند عکس بهتر است سفید باشد' } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/save: { post: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Save Product', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { category_id: { type: integer, example: 123, description: 'product leaf cateogry id' }, draft_product_id: { type: integer, example: 1234, description: 'draft product id that just been created' }, only_b2b: { type: boolean, example: false, description: 'is this product only sellable in B2B channel or not' }, photos_detail: { type: object, properties: { main_image: { type: string, example: 4NObd, description: 'main product image id' }, order: { type: string, example: '4NObd,4NObe', description: 'image sorting for the product (separated by comma)' }, images: { type: array, items: { type: object, properties: { encrypted_id: { type: string, example: 4NObd, description: 'product image id' }, active: { type: boolean, example: true, description: 'is product image active or not' } } }, required: false, description: 'list of product images' } }, required: {  }, description: '' } }, required: {  } }, example: { category_id: 123, draft_product_id: 1234, only_b2b: false, photos_detail: { main_image: 4NObd, order: '4NObd,4NObe', images: {  } } } } } }, responses: { 200: { description: ProductCreationStep5Form, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { data: { type: object, description: 'return created product data', properties: { product_id: { type: integer, example: 1234, description: 'product id' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { category_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, only_b2b: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, photos_detail: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, draft_product_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/assign: { post: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Assign Product To Seller', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { productId: { type: integer, example: 1234, description: 'product id that want to assign to seller products' } }, required: [productId] }, example: { productId: 1234 } } } }, responses: { 200: { description: ProductAssignForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { isValid: { type: boolean, example: true, description: 'is the product valid to be assigned to seller or not' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { productId: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/brand/request: { post: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Create Brand Request Through Product Creation.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { brand_origin: { type: string, example: iranian, description: 'where is brand manufactured originally?' }, description: { type: string, example: 'به بررسی آمار و عملکرد افرادی که در بهمن ماه 1402 در چالش‌های چالش‌های چالش‌های چالش‌های چالش‌های چالش‌های رابین سود شرکت کرده‌اند می‌پردازیم...', description: 'explain brand here' }, logo_id: { type: string, example: 4NObf, description: 'logo image id that is uploaded by brand logo API' }, name_en: { type: string, example: mine, description: 'brand name in EN' }, name_fa: { type: string, example: 'برند خودم', description: 'brand name in FA' }, iranian_registration_url: { type: string, example: 'https://ipm.ssaa.ir/Search-Result?page=2&DecNo=139650140001026526&RN=280832', description: 'the brand registration page URL in government website (https://ipm.ssaa.ir)' }, category_id: { type: string, example: 9882, description: 'category that you want to assign this brand' } }, required: [brand_origin, description, logo_id, name_en, name_fa, category_id] }, example: { brand_origin: iranian, description: 'به بررسی آمار و عملکرد افرادی که در بهمن ماه 1402 در چالش‌های چالش‌های چالش‌های چالش‌های چالش‌های چالش‌های رابین سود شرکت کرده‌اند می‌پردازیم...', logo_id: 4NObf, name_en: mine, name_fa: 'برند خودم', iranian_registration_url: 'https://ipm.ssaa.ir/Search-Result?page=2&DecNo=139650140001026526&RN=280832', category_id: 9882 } } } }, responses: { 200: { description: BrandRequestForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { data: { type: object, description: 'success data', properties: { id: { type: integer, example: 48918, description: 'brand request id' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { logo_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, name_fa: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, name_en: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, brand_origin: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, description: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, category_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/product-creation/brand: { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Search Brands in Digikala By Name.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: 'search[title_fa]', description: 'brand keyword search in FA', required: false, example: null, schema: { type: string } }, { in: query, name: 'search[title_en]', description: 'brand keyword search in EN', required: false, example: null, schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SearchBrandsListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { شیائومی: { type: object, description: 'founded brand data. key is brand name (FA or EN based on search), value is brand data', properties: { id: { type: integer, example: 1234, description: 'brand id' }, keyword: { type: string, example: 'شیائومی Xiaomi', description: 'brand full name (EN FA)' }, name_fa: { type: string, example: شیائومی, description: 'brand name in FA' }, name_en: { type: string, example: Xiaomi, description: 'brand name in EN' }, description: { type: string, example: 'برند معروف شیائومی Xiaomi یکی از بزرگ&zwnj;ترین سازندگان گوشی&zwnj;های تلفن همراه هوشمند با استفاده از جدیدترین تکنولوژی&zwnj;های جهان از سال 2010 در چین فعالیتش را آغاز کرده است. نقطه&zwnj;ی برجسته&zwnj;ی گوشی موبایل شیائومی قیمت آن&zwnj;ها است. این برند با تولید گوشی&zwnj;های تلفن همراه مقرون&zwnj;به&zwnj;صرفه در سراسر دنیا طرفداران ویژه&zwnj;ی خود را دارد.این برند&nbsp;انواع گجت&zwnj;های دیگر ازجمله دستبند سلامتی، پهپاد، لامپ هوشمند، ربات جاروبرقی، پاور بانک، دوربین&zwnj;های امنیتی و کفش&zwnj;های ورزشی هوشمند را تولید می&zwnj;کند.', description: 'brand description' }, is_iranian: { type: boolean, example: false, description: 'is brand originated from Iran or not' }, logo: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-brands/12394.png?x-oss-process=image/resize,m_lfit,h_80,w_80', description: 'brand logo url' } } } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/draft-products/seller: { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Return List Of Seller Draft Products.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: 'search[brand_ids]', description: 'list of product brand ids', required: false, example: null, schema: { type: array } }, { in: query, name: 'search[category_ids]', description: 'list of product leaf category ids', required: false, example: null, schema: { type: array } }, { in: query, name: 'search[near_expiration]', description: 'filter draft product that their expiration time is near', required: false, example: null, schema: { type: bool } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerDraftProductListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, example: 123, description: 'draft product id' }, category_id: { type: integer, example: 123, description: 'category id' }, category_name: { type: string, example: 'نقشه چاپی', description: 'category name' }, division_id: { type: integer, example: 123, description: 'division id' }, model: { type: string, example: زیررررو, description: 'product model' }, brand_id: { type: integer, example: 123, description: 'brand id' }, brand_name: { type: string, example: متفرقه, description: 'brand name FA' }, product_type_ids: { type: array, description: 'list of product type ids', items: { type: integer, example: 19709, description: 'product type id' } }, is_iranian: { type: boolean, example: true, description: 'is product originally manufactured in IRAN or not' }, product_classes: { type: array, description: 'list of product class ids', items: { type: string, example: 2 } }, fake: { type: boolean, example: false, description: 'is product fake or original' }, general_mefa_id: { type: integer, example: 17242, description: 'product general MEFA id (شناسه عمومی کالا)' }, exclusive_mefa_id: { type: string, example: '', description: 'product exclusive MEFA id (شناسه اختصاصی کالا)' }, package_width: { type: integer, example: 123, description: 'product packaging width (mm)' }, package_height: { type: integer, example: 123, description: 'product packaging height (mm)' }, package_length: { type: integer, example: 123, description: 'product packaging length (mm)' }, package_weight: { type: integer, example: 123, description: 'product packaging width (gram)' }, platforms: { type: array, description: 'list of product selling platforms', items: { type: string, example: digikala, description: 'selling platform', enum: [digikala, fresh] } }, description: { type: string, example: 'شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست ', description: 'product description' }, advantages: { type: array, description: 'list of product advantages', items: { type: string, example: خووبه } }, disadvantages: { type: array, description: 'list of product disadvantages', items: { type: string, example: بدددده } }, title_en: { type: string, example: 'نام کالا', description: 'product title EN' }, title_fa: { type: string, example: 'نام کالا', description: 'product title FA' }, width: { type: integer, example: 1, description: 'product width (mm)' }, height: { type: integer, example: 1, description: 'product height (mm)' }, length: { type: integer, example: 1, description: 'product length (mm)' }, weight: { type: integer, example: 1, description: 'product weight (gram)' }, remaining_day: { type: integer, example: 29, description: 'remaining days of draft product(in day). After this amount draft product will be removed' }, site: { type: string, example: digikala, description: 'product selling channel', enum: [digikala, digistyle] }, status: { type: string, example: marketable, description: 'product selling status', enum: [marketable, coming_soon, stop_production] }, product_type: { type: string, example: product, description: 'product type', enum: [product, giftcard, no_direct_order, dk_electronic_gift_card, donation, irancell_simcard, cheque] }, product_nature: { type: string, example: non_fmcg, description: 'the nature of product', enum: [non_fmcg, non_food, food, fresh, frozen, non_inventory] }, active: { type: boolean, example: true, description: 'product activation status' }, active_digistyle: { type: boolean, example: false, description: 'product activation status in digistyle channel' }, sensitivity: { type: string, example: normal, description: 'the status of product selling sensitivity', enum: [normal, sensitive] }, vat: { type: integer, example: 9, description: 'the percentage of product Value-Added-Tax' }, next_step: { type: array, description: 'show the next steps of product creation that is not done yet for this draft product', items: { type: string, example: 'step title' } }, step: { type: string, example: step_basic_info, description: 'current draft product step' }, score: { type: object, description: 'the draft product content score. shows how strong is the product content', properties: { score_details: { type: object, description: 'details of the draft product content score', properties: { category: { type: object, description: 'score of category related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'seller score for this item' } } }, brand: { type: object, description: 'score of brand related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'seller score for this item' } } }, type: { type: object, description: 'score of product type related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'product score for this item' } } }, model: { type: object, description: 'score of product model related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'product score for this item' } } }, originality: { type: object, description: 'score of manufacturer related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'product score for this item' } } }, division: { type: object, description: 'score of division related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } }, mefa: { type: object, description: 'score of mefa (شناسه کالا) related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'product score for this item' } } }, description: { type: object, description: 'score of description related contents', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 2, description: 'product score for this item' } } }, advantage: { type: object, description: 'score of advantages related contents', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 2, description: 'product score for this item' } } }, disadvantage: { type: object, description: 'score of disadvantages related contents', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 2, description: 'product score for this item' } } }, attribute_1597: { type: object, description: 'score of attributes related contents. key of this object shows the attribute id (and for other attributes there will be another object', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } }, title_fa: { type: object, description: 'score of title FA related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } }, title_en: { type: object, description: 'score of title EN related contents', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } }, photo: { type: object, description: 'score of photo related contents', properties: { max: { type: integer, example: 6, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } } } }, total: { type: integer, example: 12, description: 'total product content score' }, max: { type: integer, example: 31, description: 'highest possible product content score' }, percent: { type: integer, example: 38, description: 'total product content score in percentage' } } } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/draft-products/{draft_product_id}': { delete: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Delete a draft product', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: draft_product_id, description: null, required: true, example: null, schema: { type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DeleteDraftProductForm }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/products/seller: { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'seller product list view', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 50 } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { type: string, default: id, enum: [id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: asc } }, { in: query, name: 'search[multi_search]', description: 'search by product title or id', required: false, example: null, schema: { type: 'search box' } }, { in: query, name: 'search[category_id]', description: 'search by category id', required: false, example: null, schema: { type: option } }, { in: query, name: 'search[brand_id]', description: 'search by brand id', required: false, example: null, schema: { type: option } }, { in: query, name: 'search[moderation_status]', description: 'search by product moderation status id', required: false, example: null, schema: { type: option, enum: [draft, in_review, waiting_for_confirm, edit_after_approved, approved, in_review_after_approved, removed, duplicate] } }, { in: query, name: 'search[fake_status]', description: 'search by product originality', required: false, example: null, schema: { type: radio, enum: [fake, real] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerProductManagementListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { variants_count: { type: integer, example: 1, description: 'count of variants for this product' }, site: { type: string, example: digikala, description: 'channel of this product', enum: [digikala, digistyle] }, title: { type: string, example: 'کتاب مدل زیرووو', description: 'product title FA' }, status: { type: string, example: marketable, description: 'product status', enum: [marketable, coming_soon, stop_production] }, product_id: { type: integer, example: 14329321, description: 'product id' }, fake: { type: boolean, example: false, description: 'is product fake or original' }, status_data: { type: string, example: draft, description: 'product moderation status', enum: [draft, in_review, waiting_for_confirm, waiting_for_photo, edit_after_approved, approved, in_review_after_approved, removed, duplicate] }, is_owner: { type: boolean, example: true, description: 'is seller owner of this product or not' }, main_category_title: { type: object, description: 'list of product category title (key is category id and value is category data)', properties: { 9882: { type: string, example: 'نقشه چاپی', description: 'category title' } } }, active: { type: boolean, example: true, description: 'is product active or not' }, title_fa: { type: string, example: 'کتاب مدل زیرووو', description: 'product title in FA' }, title_en: { type: string, example: 'Book Zirooo model', description: 'product title in EN' }, brand_id: { type: integer, example: 7663, description: 'product brand id' }, brand_title_en: { type: string, example: 'H&M', description: 'product brand title in EN' }, brand_title_fa: { type: string, example: 'اچ اند ام', description: 'product brand title in FA' }, product_url: { type: string, example: 'https://demo.digikala.com/product/dkp-14329321/', description: 'product page URL in Digikala' }, image_src: { type: string, example: 'https://dkstatic-public-demo.digikala.com/digikala-products/1472643fd536c1e74fa53ec2203471f5d45_1724103997.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60', description: 'product main image URL' }, dimension_level: { type: string, example: item, description: '???', enum: [product, item] }, brand_title: { type: string, example: 'اچ اند ام - H&M', description: 'product brand fullname (EN FA)' }, moderation_status: { type: object, description: 'moderation status object', properties: { title: { type: string, example: draft, description: 'moderation status title' }, status: { type: string, example: draft, description: 'moderation status', enum: [draft, in_review, waiting_for_confirm, waiting_for_photo, edit_after_approved, approved, in_review_after_approved, removed, duplicate] } } }, adverge_url: { type: string, example: www.adverge.ir, description: 'its product advertisement url in adverge website' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/products/{product_id}/score': { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Get Content Score of Product.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: product_id, description: null, required: true, example: null, schema: { type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductContentScoreObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { score: { type: object, description: 'total Score of product', properties: { max: { type: integer, example: 1, description: 'maximum possible score' }, current: { type: integer, example: 1, description: 'product total score' } } }, scores: { type: object, description: 'product content score. shows how strong is the product content', properties: { score_details: { type: object, description: 'details of the product content score', properties: { category: { type: object, description: 'score of category related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'seller score for this item' } } }, brand: { type: object, description: 'score of brand related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'seller score for this item' } } }, type: { type: object, description: 'score of product type related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'product score for this item' } } }, model: { type: object, description: 'score of product model related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'product score for this item' } } }, originality: { type: object, description: 'score of manufacturer related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'product score for this item' } } }, division: { type: object, description: 'score of division related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } }, mefa: { type: object, description: 'score of mefa (شناسه کالا) related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 1, description: 'product score for this item' } } }, description: { type: object, description: 'score of description related contents', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 2, description: 'product score for this item' } } }, advantage: { type: object, description: 'score of advantages related contents', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 2, description: 'product score for this item' } } }, disadvantage: { type: object, description: 'score of disadvantages related contents', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 2, description: 'product score for this item' } } }, attribute_1597: { type: object, description: 'score of attributes related contents. key of this object shows the attribute id (and for other attributes there will be another object', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } }, title_fa: { type: object, description: 'score of title FA related contents', properties: { max: { type: integer, example: 1, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } }, title_en: { type: object, description: 'score of title EN related contents', properties: { max: { type: integer, example: 2, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } }, photo: { type: object, description: 'score of photo related contents', properties: { max: { type: integer, example: 6, description: 'maximum score for this item' }, current: { type: integer, example: 0, description: 'product score for this item' } } } } }, total: { type: integer, example: 12, description: 'total product content score' }, max: { type: integer, example: 31, description: 'highest possible product content score' }, percent: { type: integer, example: 38, description: 'total product content score in percentage' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/product-edit/{product_id}/publish': { post: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Publish Product after Edit', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: product_id, description: null, required: true, example: null, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { force_marketplace_seller_id: { type: integer } }, required: {  } }, example: {  } } } }, responses: { 200: { description: ProductPublishForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { isValid: { type: boolean, description: 'application response status', example: true } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { product_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/product-edit/{product_id}': { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'View Of Product For Edition.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: product_id, description: null, required: true, example: null, schema: { type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductEditObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { product_data: { type: object, description: '', properties: { id: { type: integer, example: 1234, description: '' }, marketplace_seller_id: { type: integer, example: 123, description: '' }, category_id: { type: integer, example: 123, description: '' }, division_id: { type: integer, example: 123, description: '' }, model: { type: string, example: زیررررو, description: '' }, brand_id: { type: integer, example: 123, description: '' }, product_type_ids: { type: array, description: '', items: { type: integer, example: 123 } }, product_type: { type: string, example: type, description: '' }, show_colors: { type: boolean, example: false, description: '' }, is_iranian: { type: boolean, example: true, description: '' }, product_classes: { type: array, description: '', items: { type: string, example: 2 } }, fake: { type: boolean, example: false, description: '' }, general_mefa_id: { type: integer, example: 1234, description: '' }, package_width: { type: integer, example: 1, description: '' }, package_height: { type: integer, example: 1, description: '' }, package_length: { type: integer, example: 1, description: '' }, package_weight: { type: integer, example: 1, description: '' }, platforms: { type: array, description: '', items: { type: string, example: digikala } }, description: { type: string, example: 'شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست شرح کالا اینجاست ', description: '' }, advantages: { type: array, description: '', items: { type: string, example: خووبه } }, disadvantages: { type: array, description: '', items: { type: string, example: بدددده } }, title_en: { type: string, example: 'Book Zirooo model', description: '' }, title_fa: { type: string, example: 'کتاب مدل زیرووو', description: '' }, attributes: { type: object, description: '', properties: { 9882: { type: object, description: '', properties: { 119: { type: string, example: 'هیچ توضیح دیگه ای نیست', description: '' } } } } }, width: { type: integer, example: 1, description: '' }, height: { type: integer, example: 1, description: '' }, length: { type: integer, example: 1, description: '' }, weight: { type: integer, example: 1, description: '' }, brand_name: { type: string, example: 'اچ اند ام', description: '' }, moderation_status: { type: string, example: draft, description: '' }, images: { type: array, description: '', items: { type: object, properties: { encrypted_id: { type: string, example: VHF2NnVWNTJxODEzUTJ1TGNOYS82SGdMajU3ZXo0RTgxQVhuUEhPelFMWjhXVkticlhYSkZTMDVuZHI0V0E9PQ==, description: '' }, image_url: { type: string, example: 'https://dkstatic-public-demo.digikala.com/digikala-products/1472643fb536c1e74fa53ec2203471f5d45_1724104259.jpg?x-oss-process=image/resize,m_fill,h_90,w_90', description: '' }, image_max_url: { type: string, example: 'https://dkstatic-public-demo.digikala.com/digikala-products/1473fd8546b536c1e74fa53ec2203471f5d45_1724104259.jpg', description: '' }, is_main: { type: boolean, example: false, description: '' }, options: { type: object, description: '', properties: { type: { type: string, example: jpg, description: '' }, watermark: { type: boolean, example: true, description: '' }, copyright: { type: boolean, example: false, description: '' }, is_active: { type: boolean, example: true, description: '' }, sort: { type: integer, example: 1, description: '' } } }, order: { type: integer, example: 1, description: '' } } } } } }, moderation_response: { type: object, description: '', properties: { images: { type: array, description: '', items: { type: string, example: '' } } } }, enabled_fields: { type: array, description: '', items: { type: string, example: description } }, steps_moderation_status: { type: object, description: '', properties: { step_title: { type: boolean, example: false, description: '' }, step_category: { type: boolean, example: false, description: '' }, step_basic_info: { type: boolean, example: false, description: '' }, step_attribute: { type: boolean, example: false, description: '' }, step_image: { type: boolean, example: false, description: '' } } }, locked_for_moderation: { type: boolean, example: false, description: '' }, multi_seller_product: { type: boolean, example: false, description: '' }, edit_status: { type: string, example: draft, description: '' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { product_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false }, put: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Edit Product Fields.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: product_id, description: 'product id', required: true, example: 1234, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { category_id: { type: integer, example: 1234, description: 'product leaf category id' }, division_id: { type: integer, example: 1234, description: 'product division id. Division is a subset of similar products in a leaf category that have some similar attributes' }, model: { type: string, example: 'S22 fan edition', description: 'It''s exactly the model of the product' }, brand_id: { type: integer, example: Samsung, description: 'Brand of the product. it define the product producer brand or if it does not have one, it can be miscellaneous' }, product_type_ids: { type: array, items: { type: integer, example: 1234 }, required: false, description: 'list of product type ids, Product Type is a subset of similar products in a leaf category' }, color_id: { type: integer, example: 1234, description: 'color id of the product' }, is_iranian: { type: boolean, example: true, description: 'if the product is produced in Iran or not (The origin of the product)' }, product_classes: { type: array, items: { type: integer, example: 123 }, required: false, description: 'Its a list of the badge/classes that a product have' }, fake: { type: boolean, example: true, description: 'Is product produced by the Brand or not (is it a copy of main product or etc.)' }, general_mefa_id: { type: string, example: '2132114141312321', description: 'شناسه عمومی کالا' }, exclusive_mefa_id: { type: string, example: '2132114141312321', description: 'شناسه اختصاصی کالا' }, package_width: { type: integer, example: 12, description: 'Width of product packaging in centimeter (product main package, not the Post package or anything else)' }, package_height: { type: integer, example: 12, description: 'Height of product packaging in centimeter (product main package, not the Post package or anything else)' }, package_length: { type: integer, example: 12, description: 'Length of product packaging in centimeter (product main package, not the Post package or anything else)' }, package_weight: { type: integer, example: 12, description: 'Weight of product packaging in gram (product main package, not the Post package or anything else)' }, description: { type: string, example: 'این محصول از توانایی های عجیبی برخوردار است ', description: 'A comprehensive explanation (In Farsi) of the product, its usage and etc.' }, disadvantages: { type: array, items: { type: string, example: 'محصول بد، محصول ضعیف، باطری ضعیف ' }, required: false, description: 'a list of advantages of the product, separated by comma' }, advantages: { type: array, items: { type: string, example: 'محصول خوب، محصول عالی، باطری قوی ' }, required: false, description: 'a list of disadvantages of the product, separated by comma' }, width: { type: integer, example: 12, description: 'Width of product in centimeter' }, height: { type: integer, example: 12, description: 'Height of product in centimeter' }, length: { type: integer, example: 12, description: 'Length of product in centimeter' }, weight: { type: integer, example: 12, description: 'Weight of product in gram' }, attributes: { type: object, properties: { 123: { type: object, properties: { id: { type: integer, example: 12, description: 'attribute id' }, value: { type: mixed, example: [digikala, digistyle], description: 'attribute value' } }, required: {  }, description: 'list of attributes (key is attribute group id, value is list of attributes)' } }, required: {  }, description: 'list of attribute groups and its attributes' }, title_fa: { type: string, example: 'کتاب زیروووو', description: 'product title in FA' }, title_en: { type: string, example: 'Zero Book', description: 'product title in EN' }, photos_detail: { type: object, properties: { main_image: { type: string, example: 4NObd, description: 'main product image id' }, order: { type: string, example: '4NObd,4NObe', description: 'image sorting for the product (separated by comma)' }, images: { type: array, items: { type: object, properties: { encrypted_id: { type: string, example: 4NObd, description: 'product image id' }, active: { type: boolean, example: true, description: 'is product image active or not' } } }, required: false, description: 'list of product images' } }, required: {  }, description: '' }, video_ids: { type: array, items: { required: false, type: string, description: 'product video id', example: 123bsd }, required: false, description: 'list of product video id' } }, required: [category_id, brand_id, is_iranian] }, example: { category_id: 1234, division_id: 1234, model: 'S22 fan edition', brand_id: Samsung, product_type_ids: [1234], color_id: 1234, is_iranian: true, product_classes: [123], fake: true, general_mefa_id: '2132114141312321', exclusive_mefa_id: '2132114141312321', package_width: 12, package_height: 12, package_length: 12, package_weight: 12, description: 'این محصول از توانایی های عجیبی برخوردار است ', disadvantages: ['محصول بد، محصول ضعیف، باطری ضعیف '], advantages: ['محصول خوب، محصول عالی، باطری قوی '], width: 12, height: 12, length: 12, weight: 12, attributes: { 123: { id: 12, value: [digikala, digistyle] } }, title_fa: 'کتاب زیروووو', title_en: 'Zero Book', photos_detail: { main_image: 4NObd, order: '4NObd,4NObe', images: {  } }, video_ids: [123bsd] } } } }, responses: { 200: { description: ProductEditForm }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/product-edit/{category_id}/auto-title': { post: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Get Title Suggestion Data By Product Fields', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: category_id, description: 'product leaf category id', required: true, example: 1234, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { division_id: { type: integer, example: 1234, description: 'product division id. Division is a subset of similar products in a leaf category that have some similar attributes' }, model: { type: string, example: 'S22 fan edition', description: 'It''s exactly the model of the product' }, brand_id: { type: integer, example: Samsung, description: 'Brand of the product. it define the product producer brand or if it does not have one, it can be miscellaneous' }, product_type_ids: { type: array, items: { type: integer, example: 1234 }, required: false, description: 'list of product type ids, Product Type is a subset of similar products in a leaf category' }, attributes: { type: object, properties: { 123: { type: object, properties: { id: { type: integer, example: 12, description: 'attribute id' }, value: { type: mixed, example: [digikala, digistyle], description: 'attribute value' } }, required: {  }, description: 'list of attributes (key is attribute group id, value is list of attributes)' } }, required: {  }, description: 'list of attribute groups and its attributes' } }, required: [brand_id] }, example: { division_id: 1234, model: 'S22 fan edition', brand_id: Samsung, product_type_ids: [1234], attributes: { 123: { id: 12, value: [digikala, digistyle] } } } } } }, responses: { 200: { description: ProductEditAutoTitleSuggestionForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { title_fa: { type: string, example: 'کتاب مدل زیروووو', description: 'suggested title by system' }, title_en: { type: string, example: '', description: 'nothing yet' }, hint: { type: object, description: 'shows the title formula in this category will be defined by system', properties: { hint_fa: { type: string, example: 'ماهیت کالا + برند کالا + مدل کالا', description: 'title formula for FA title' }, hint_en: { type: string, example: '', description: 'nothing yet' } } }, enable_edit: { type: boolean, example: true, description: 'is it possible to edit suggested title by system or not' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/commission/commissions/{product_id}': { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Get commission related to product', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: product_id, description: null, required: true, example: null, schema: { type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductCommissionObjectView }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { product_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/commission/{category_id}/{brand_id}': { get: { tags: ['Product (30)'], summary: 'Scopes => product', description: 'Commission Of Combination Of Brand And Category', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: category_id, description: null, required: true, example: null, schema: { type: null } }, { in: path, name: brand_id, description: null, required: true, example: null, schema: { type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: BrandCategoryCommissionObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { commission: { type: string, example: 8%, description: 'the percentage of Digikala commission' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { category_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, brand_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/variants: { get: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'List of seller variants.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 50 } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { type: string, default: id, enum: [id, product_variant_id, selling_stock, selling_price, marketplace_seller_stock, warehouse_stock] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: asc } }, { in: query, name: 'search[id]', description: 'variant id', required: false, example: 132, schema: { type: integer } }, { in: query, name: 'search[shipping_type]', description: 'type of shipping', required: false, example: digikala, schema: { type: string, enum: [seller, digikala, both] } }, { in: query, name: 'search[active]', description: 'if the variant is active or not', required: false, example: true, schema: { type: boolean } }, { in: query, name: 'search[moderation_status]', description: 'moderation status of variant related product', required: false, example: approved, schema: { type: string } }, { in: query, name: 'search[category_ids]', description: 'Comma seperated category ids.', required: false, example: '1,2,3', schema: { type: 'string,integer' } }, { in: query, name: 'search[buy_box_winner]', description: 'if the variant is boy box winner', required: false, example: true, schema: { type: boolean } }, { in: query, name: 'search[in_competition]', description: 'if variant has other competition', required: false, example: true, schema: { type: boolean } }, { in: query, name: 'search[search_term]', description: 'Search in variant id, title and product id, title', required: false, example: 'لباس زیر مردانه', schema: { type: string } }, { in: query, name: 'search[price_terms]', description: 'Comma seperated price conditions for search.', required: false, example: 'buy_box_challenge,promotion,incredible_promotion', schema: { type: string } }, { in: query, name: 'search[out_of_stock]', description: 'if the variant has no stock', required: false, example: true, schema: { type: boolean } }, { in: query, name: 'search[archived]', description: 'if the variant is archived', required: false, example: true, schema: { type: boolean } }, { in: query, name: 'search[selling_channel]', description: 'selling channels', required: false, example: digikala, schema: { type: string, enum: [digikala, digistyle, digikala_digistyle, b2b, digikala_b2b, digistyle_b2b, all] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductVariantListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id, product_variant_id, selling_stock, selling_price, marketplace_seller_stock, warehouse_stock] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, example: 12345, description: 'variant id' }, image_src: { type: string, example: 'https://dkstatic-public-demo.digikala.com/digikala-products/8c65efa85d4dd5a0d763d6b0cba6a7cb2d26c9_1717921911.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60', description: '' }, seller_id: { type: integer, example: 1234, description: '' }, main_category_title: { type: string, example: 'هودی زنانه', description: '' }, category_id: { type: integer, example: 12134, description: '' }, product_id: { type: integer, example: 1234, description: '' }, product_url: { type: string, example: 'https://demo.digikala.com/product/dkp-134/', description: '' }, product_variant_id: { type: integer, example: 1234, description: '' }, supplier_code: { type: string, example: 123-c, description: '' }, product_moderation_status: { type: string, example: edit_after_approved, description: '' }, title: { type: string, example: 'هودی زنانه مدل تست رعنا ادیت سلر | ف| گارانتی سلامت فیزیکی کالا', description: '' }, product_title: { type: string, example: 'هودی زنانه مدل تست رعنا ادیت سلر', description: '' }, active: { type: boolean, example: false, description: '' }, lead_time: { type: integer, example: 3, description: 'time to send the variant to warehouse' }, price_list: { type: integer, example: 2666800, description: 'reference price' }, market_price_last_update: { type: string, example: '2024-07-28 13:52:06', description: '' }, price_type: { type: string, example: recommended, description: '' }, selling_channel_site: { type: string, example: digikala, description: 'site for selling' }, price_sale: { type: integer, example: 2345600, description: 'selling price' }, marketplace_seller_stock: { type: integer, example: 12, description: 'stock with the seller' }, warehouse_stock: { type: integer, example: 1, description: 'stock in warehouse' }, on_the_way_stock: { type: integer, example: 1, description: 'number of that variant which has not been completely received' }, reservation: { type: integer, example: 1, description: '' }, left_consumer: { type: integer, example: 12, description: 'available number of that variant to be sold' }, maximum_per_order: { type: integer, example: 12, description: 'maximum number of that variant in an order' }, allowed_count: { type: integer, example: 1, description: 'maximum consignment' }, ovl_selling_active: { type: boolean, example: true, description: '' }, b2b_params: { type: object, description: '', properties: { seller_b2b_active: { type: boolean, example: true, description: 'does the seller have b2b module active' }, is_only_b2b: { type: boolean, example: false, description: 'is the variant only b2b' }, is_b2b_active: { type: boolean, example: false, description: 'is b2b selling active for variant' } } }, max_lead_time: { type: integer, example: 3, description: 'maximum time to send the variant to warehouse' }, buy_box_price: { type: integer, example: 10000, description: 'buybox price' }, is_buy_box_winner: { type: boolean, example: false, description: 'is this variant buybox winner' }, is_seller_buy_box_winner: { type: boolean, example: false, description: 'is the seller buybox winner(maybe their other variant)' }, is_in_buy_box_challenge: { type: boolean, example: false, description: 'does the variant have competition' }, min_selling_price_limit: { type: integer, example: 1000, description: 'minimum selling price' }, product_selling_chanel: { type: object, description: '', properties: { active_digikala: { type: boolean, example: true, description: 'can the variant be sold at digikala' }, active_digistyle: { type: boolean, example: false, description: 'can the variant be sold at digistyle' } } }, variant_selling_chanel: { type: object, description: '', properties: { active_digikala: { type: boolean, example: false, description: 'if the variant''s selling is active on digikala' }, active_digistyle: { type: boolean, example: false, description: 'if the variant''s selling is active on digistyle' } } }, is_in_incredible_promotion: { type: boolean, example: false, description: 'is the variant in incredible promotion' }, is_in_periodic_promotion: { type: boolean, example: false, description: 'if the variant has smart periodic prices' }, is_in_promotion: { type: boolean, example: false, description: 'if the variant is in promotion' }, promotion_price: { type: integer, example: 10000, description: 'price in promotion' }, shipping_nature_id: { type: integer, example: 1, description: 'nature of the shipping which can be 1 2 or 3' }, default_selling_chanel_code: { type: integer, example: 1, description: 'the default selling channel for that variant (digikala, digistyle, ..)' }, rating: { type: double, example: 1.5, description: 'rating of that variant' }, is_promotion_management_visible_for_seller: { type: boolean, example: true, description: 'can seller see the promotion modal' }, is_archived: { type: boolean, example: false, description: 'is the variant archived' }, fulfilment_and_delivery_cost: { type: integer, example: 164192, description: 'cost of fulfilling and delivering the variant' }, seller_reservation: { type: integer, example: 1, description: 'the reserved amount at seller' }, digikala_reservation: { type: integer, example: 1, description: 'the reserved amount at digikala' }, seller_shipping_lead_time: { type: integer, example: 1, description: 'time for when seller sends the variant to customer' }, shipping_options: { type: object, description: '', properties: { is_fbs_ability_enable: { type: boolean, example: true, description: 'can the seller become sbs' }, is_fbd_active: { type: boolean, example: true, description: 'is selling by digikala is active' }, is_fbs_active: { type: boolean, example: false, description: 'is selling by seller is active' }, is_needed_fbs_setting: { type: boolean, example: false, description: 'does the seller needs defining sbs setting' }, is_sbs_module_active: { type: boolean, example: true, description: 'if the seller has an active sbs module' }, only_sbs: { type: boolean, example: false, description: 'if the variant should be only sold by seller' } } } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}': { get: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'Get Product Variant data', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: variant_id, description: '', required: true, example: 1234, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductVariantObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { id: { type: integer, example: 12345, description: 'variant id' }, image_src: { type: string, example: 'https://dkstatic-public-demo.digikala.com/digikala-products/8c65efa85d4dd5a0d763d6b0cba6a7cb2d26c9_1717921911.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60', description: '' }, seller_id: { type: integer, example: 1234, description: '' }, main_category_title: { type: string, example: 'هودی زنانه', description: '' }, category_id: { type: integer, example: 12134, description: '' }, product_id: { type: integer, example: 1234, description: '' }, product_url: { type: string, example: 'https://demo.digikala.com/product/dkp-134/', description: '' }, product_variant_id: { type: integer, example: 1234, description: '' }, supplier_code: { type: string, example: 123-c, description: '' }, product_moderation_status: { type: string, example: edit_after_approved, description: '' }, title: { type: string, example: 'هودی زنانه مدل تست رعنا ادیت سلر | ف| گارانتی سلامت فیزیکی کالا', description: '' }, product_title: { type: string, example: 'هودی زنانه مدل تست رعنا ادیت سلر', description: '' }, active: { type: boolean, example: false, description: '' }, lead_time: { type: integer, example: 3, description: 'time to send the variant to warehouse' }, price_list: { type: integer, example: 2666800, description: 'reference price' }, market_price_last_update: { type: string, example: '2024-07-28 13:52:06', description: '' }, price_type: { type: string, example: recommended, description: '' }, selling_channel_site: { type: string, example: digikala, description: 'site for selling' }, price_sale: { type: integer, example: 2345600, description: 'selling price' }, marketplace_seller_stock: { type: integer, example: 12, description: 'stock with the seller' }, warehouse_stock: { type: integer, example: 1, description: 'stock in warehouse' }, on_the_way_stock: { type: integer, example: 1, description: 'number of that variant which has not been completely received' }, reservation: { type: integer, example: 1, description: '' }, left_consumer: { type: integer, example: 12, description: 'available number of that variant to be sold' }, maximum_per_order: { type: integer, example: 12, description: 'maximum number of that variant in an order' }, allowed_count: { type: integer, example: 1, description: 'maximum consignment' }, ovl_selling_active: { type: boolean, example: true, description: '' }, b2b_params: { type: object, description: '', properties: { seller_b2b_active: { type: boolean, example: true, description: 'does the seller have b2b module active' }, is_only_b2b: { type: boolean, example: false, description: 'is the variant only b2b' }, is_b2b_active: { type: boolean, example: false, description: 'is b2b selling active for variant' } } }, max_lead_time: { type: integer, example: 3, description: 'maximum time to send the variant to warehouse' }, buy_box_price: { type: integer, example: 10000, description: 'buybox price' }, is_buy_box_winner: { type: boolean, example: false, description: 'is this variant buybox winner' }, is_seller_buy_box_winner: { type: boolean, example: false, description: 'is the seller buybox winner(maybe their other variant)' }, is_in_buy_box_challenge: { type: boolean, example: false, description: 'does the variant have competition' }, min_selling_price_limit: { type: integer, example: 1000, description: 'minimum selling price' }, product_selling_chanel: { type: object, description: '', properties: { active_digikala: { type: boolean, example: true, description: 'can the variant be sold at digikala' }, active_digistyle: { type: boolean, example: false, description: 'can the variant be sold at digistyle' } } }, variant_selling_chanel: { type: object, description: '', properties: { active_digikala: { type: boolean, example: false, description: 'if the variant''s selling is active on digikala' }, active_digistyle: { type: boolean, example: false, description: 'if the variant''s selling is active on digistyle' } } }, is_in_incredible_promotion: { type: boolean, example: false, description: 'is the variant in incredible promotion' }, is_in_periodic_promotion: { type: boolean, example: false, description: 'if the variant has smart periodic prices' }, is_in_promotion: { type: boolean, example: false, description: 'if the variant is in promotion' }, promotion_price: { type: integer, example: 10000, description: 'price in promotion' }, shipping_nature_id: { type: integer, example: 1, description: 'nature of the shipping which can be 1 2 or 3' }, default_selling_chanel_code: { type: integer, example: 1, description: 'the default selling channel for that variant (digikala, digistyle, ..)' }, rating: { type: double, example: 1.5, description: 'rating of that variant' }, is_promotion_management_visible_for_seller: { type: boolean, example: true, description: 'can seller see the promotion modal' }, is_archived: { type: boolean, example: false, description: 'is the variant archived' }, fulfilment_and_delivery_cost: { type: integer, example: 164192, description: 'cost of fulfilling and delivering the variant' }, seller_reservation: { type: integer, example: 1, description: 'the reserved amount at seller' }, digikala_reservation: { type: integer, example: 1, description: 'the reserved amount at digikala' }, seller_shipping_lead_time: { type: integer, example: 1, description: 'time for when seller sends the variant to customer' }, shipping_options: { type: object, description: '', properties: { is_fbs_ability_enable: { type: boolean, example: true, description: 'can the seller become sbs' }, is_fbd_active: { type: boolean, example: true, description: 'is selling by digikala is active' }, is_fbs_active: { type: boolean, example: false, description: 'is selling by seller is active' }, is_needed_fbs_setting: { type: boolean, example: false, description: 'does the seller needs defining sbs setting' }, is_sbs_module_active: { type: boolean, example: true, description: 'if the seller has an active sbs module' }, only_sbs: { type: boolean, example: false, description: 'if the variant should be only sold by seller' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { variant_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false }, put: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'Edit seller variant data.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: variant_id, description: 'id of variant', required: true, example: 123, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { seller_stock: { type: integer, example: 123, description: 'seller new stock' }, maximum_per_order: { type: integer, example: 123, description: 'maximum number of that variant in an order' }, selling_price: { type: integer, example: 123, description: 'selling price' }, shipping_type: { type: string, example: digikala, description: 'shipping type of the variant' }, lead_time: { type: integer, example: 1, description: 'number of days to send the variant to warehouse' }, seller_lead_time: { type: integer, example: 24, description: 'hours to send the variant to customer by seller' } }, required: {  } }, example: { seller_stock: 123, maximum_per_order: 123, selling_price: 123, shipping_type: digikala, lead_time: 1, seller_lead_time: 24 } } } }, responses: { 200: { description: UpdateProductVariantForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { id: { type: integer, example: 12345, description: 'variant id' }, image_src: { type: string, example: 'https://dkstatic-public-demo.digikala.com/digikala-products/8c65efa85d4dd5a0d763d6b0cba6a7cb2d26c9_1717921911.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60', description: '' }, seller_id: { type: integer, example: 1234, description: '' }, main_category_title: { type: string, example: 'هودی زنانه', description: '' }, category_id: { type: integer, example: 12134, description: '' }, product_id: { type: integer, example: 1234, description: '' }, product_url: { type: string, example: 'https://demo.digikala.com/product/dkp-134/', description: '' }, product_variant_id: { type: integer, example: 1234, description: '' }, supplier_code: { type: string, example: 123-c, description: '' }, product_moderation_status: { type: string, example: edit_after_approved, description: '' }, title: { type: string, example: 'هودی زنانه مدل تست رعنا ادیت سلر | ف| گارانتی سلامت فیزیکی کالا', description: '' }, product_title: { type: string, example: 'هودی زنانه مدل تست رعنا ادیت سلر', description: '' }, active: { type: boolean, example: false, description: '' }, lead_time: { type: integer, example: 3, description: 'time to send the variant to warehouse' }, price_list: { type: integer, example: 2666800, description: 'reference price' }, market_price_last_update: { type: string, example: '2024-07-28 13:52:06', description: '' }, price_type: { type: string, example: recommended, description: '' }, selling_channel_site: { type: string, example: digikala, description: 'site for selling' }, price_sale: { type: integer, example: 2345600, description: 'selling price' }, marketplace_seller_stock: { type: integer, example: 12, description: 'stock with the seller' }, warehouse_stock: { type: integer, example: 1, description: 'stock in warehouse' }, on_the_way_stock: { type: integer, example: 1, description: 'number of that variant which has not been completely received' }, reservation: { type: integer, example: 1, description: '' }, left_consumer: { type: integer, example: 12, description: 'available number of that variant to be sold' }, maximum_per_order: { type: integer, example: 12, description: 'maximum number of that variant in an order' }, allowed_count: { type: integer, example: 1, description: 'maximum consignment' }, ovl_selling_active: { type: boolean, example: true, description: '' }, b2b_params: { type: object, description: '', properties: { seller_b2b_active: { type: boolean, example: true, description: 'does the seller have b2b module active' }, is_only_b2b: { type: boolean, example: false, description: 'is the variant only b2b' }, is_b2b_active: { type: boolean, example: false, description: 'is b2b selling active for variant' } } }, max_lead_time: { type: integer, example: 3, description: 'maximum time to send the variant to warehouse' }, buy_box_price: { type: integer, example: 10000, description: 'buybox price' }, is_buy_box_winner: { type: boolean, example: false, description: 'is this variant buybox winner' }, is_seller_buy_box_winner: { type: boolean, example: false, description: 'is the seller buybox winner(maybe their other variant)' }, is_in_buy_box_challenge: { type: boolean, example: false, description: 'does the variant have competition' }, min_selling_price_limit: { type: integer, example: 1000, description: 'minimum selling price' }, product_selling_chanel: { type: object, description: '', properties: { active_digikala: { type: boolean, example: true, description: 'can the variant be sold at digikala' }, active_digistyle: { type: boolean, example: false, description: 'can the variant be sold at digistyle' } } }, variant_selling_chanel: { type: object, description: '', properties: { active_digikala: { type: boolean, example: false, description: 'if the variant''s selling is active on digikala' }, active_digistyle: { type: boolean, example: false, description: 'if the variant''s selling is active on digistyle' } } }, is_in_incredible_promotion: { type: boolean, example: false, description: 'is the variant in incredible promotion' }, is_in_periodic_promotion: { type: boolean, example: false, description: 'if the variant has smart periodic prices' }, is_in_promotion: { type: boolean, example: false, description: 'if the variant is in promotion' }, promotion_price: { type: integer, example: 10000, description: 'price in promotion' }, shipping_nature_id: { type: integer, example: 1, description: 'nature of the shipping which can be 1 2 or 3' }, default_selling_chanel_code: { type: integer, example: 1, description: 'the default selling channel for that variant (digikala, digistyle, ..)' }, rating: { type: double, example: 1.5, description: 'rating of that variant' }, is_promotion_management_visible_for_seller: { type: boolean, example: true, description: 'can seller see the promotion modal' }, is_archived: { type: boolean, example: false, description: 'is the variant archived' }, fulfilment_and_delivery_cost: { type: integer, example: 164192, description: 'cost of fulfilling and delivering the variant' }, seller_reservation: { type: integer, example: 1, description: 'the reserved amount at seller' }, digikala_reservation: { type: integer, example: 1, description: 'the reserved amount at digikala' }, seller_shipping_lead_time: { type: integer, example: 1, description: 'time for when seller sends the variant to customer' }, shipping_options: { type: object, description: '', properties: { is_fbs_ability_enable: { type: boolean, example: true, description: 'can the seller become sbs' }, is_fbd_active: { type: boolean, example: true, description: 'is selling by digikala is active' }, is_fbs_active: { type: boolean, example: false, description: 'is selling by seller is active' }, is_needed_fbs_setting: { type: boolean, example: false, description: 'does the seller needs defining sbs setting' }, is_sbs_module_active: { type: boolean, example: true, description: 'if the seller has an active sbs module' }, only_sbs: { type: boolean, example: false, description: 'if the variant should be only sold by seller' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { variant_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/variants/b2b-activation: { put: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'Activate B2B on seller variants', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { variant_ids: { type: array, example: [123, 456, 789], description: 'ids of variant to have b2b selling activated on them' } }, required: [variant_ids] }, example: { variant_ids: [123, 456, 789] } } } }, responses: { 200: { description: ActivateProductVariantsB2BForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { message: { type: string, description: 'fixed response on success', example: success } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { variant_ids: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/variants/export: { post: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'Send an Excel file of Variant List filtered by RequestBody data to Seller Email', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { id: { type: integer, example: 123, description: 'product variant id' }, shipping_type: { type: string, example: digikala, description: 'product variant Shipping type' }, active: { type: boolean, example: true, description: 'select active variants' }, moderation_status: { type: string, example: in_review, description: 'product moderation status' }, category_ids: { type: string, example: '123,456,789', description: 'select variant in these category ids (comma separated string)' }, buy_box_winner: { type: boolean, example: true, description: 'select variants that are buy-box winner' }, in_competition: { type: boolean, example: true, description: 'select variants that more than one seller selling it' }, search_term: { type: string, example: سلام, description: 'select variants based on this keyword' }, price_terms: { type: string, example: '???', description: '???' }, out_of_stock: { type: boolean, example: true, description: 'select out of stock variants' }, archived: { type: boolean, example: true, description: 'select archived variants' }, selling_channel: { type: string, example: digikala, description: 'select selling channel of variants' } }, required: {  } }, example: { id: 123, shipping_type: digikala, active: true, moderation_status: in_review, category_ids: '123,456,789', buy_box_winner: true, in_competition: true, search_term: سلام, price_terms: '???', out_of_stock: true, archived: true, selling_channel: digikala } } } }, responses: { 200: { description: ProductConfigExcelExportForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { message: { type: string, description: 'success message', example: 'لینک گزارش درخواستی تا دقایقی دیگر به ایمیل ثبت شده‌ی شما ارسال می‌شود.' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/gold': { get: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'Gold Modal Data for variant.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: variant_id, description: 'variant id of a gold product', required: true, example: 123, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductVariantGoldModalObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { gold_wage: { type: double, example: 12.34, description: 'wage of gold part of the product' }, gold_profit: { type: double, example: 12.34, description: 'profit of gold part of the product' }, none_gold_wage: { type: double, example: 12.34, description: 'wage of non-gold part of the product' }, none_gold_cost: { type: double, example: 12.34, description: 'cost of non-gold part of the product' }, is_pure: { type: boolean, example: false, description: 'is product purely gold or not' }, size: { type: double, example: 1.2, description: 'size of variant (in gram)' }, tax: { type: integer, example: 9, description: 'product VAT tax' }, live_gold_price: { type: integer, example: 10000000, description: 'current price of gold in market (IRR)' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { variant_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false }, put: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'Edit seller variant gold data.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: variant_id, description: 'gold product variant id', required: true, example: 1234, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { gold_wage: { type: double, example: 12.34, description: 'wage of gold part of the product' }, gold_profit: { type: double, example: 12.34, description: 'profit of gold part of the product' }, none_gold_wage: { type: double, example: 12.34, description: 'wage of non-gold part of the product' }, none_gold_cost: { type: double, example: 12.34, description: 'cost of non-gold part of the product' }, order_limit: { type: integer, example: 12, description: 'maximum number of variant that customer can put in a basket' } }, required: [gold_wage, gold_profit, order_limit] }, example: { gold_wage: 12.34, gold_profit: 12.34, none_gold_wage: 12.34, none_gold_cost: 12.34, order_limit: 12 } } } }, responses: { 200: { description: UpdateProductVariantGoldModalForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { status: { type: string, description: 'fixed response on success', example: success }, did_b2b_deactivate: { type: boolean, description: '', example: true } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { variant_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, gold_profit: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, gold_wage: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, order_limit: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/price-calculator': { get: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'Calculate price with live Gold Price for Variant.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: variant_id, description: null, required: true, example: null, schema: { type: null } }, { in: query, name: gold_wage, description: 'wage of gold part of the product', required: true, example: 12.34, schema: { type: double } }, { in: query, name: gold_profit, description: 'profit of gold part of the product', required: true, example: 12.34, schema: { type: double } }, { in: query, name: none_gold_wage, description: 'wage of non-gold part of the product', required: true, example: 12.34, schema: { type: double } }, { in: query, name: none_gold_cost, description: 'cost of non-gold part of the product', required: true, example: 12.34, schema: { type: double } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductVariantGoldModalPriceCalculatorObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { price: { type: object, description: '', properties: { variantId: { type: integer, example: 123455, description: 'gold product variant id' }, sellingPrice: { type: integer, example: 158218500, description: 'calculated price of the gold product variant' }, isActive: { type: boolean, example: true, description: 'is variant active or not' }, hasStock: { type: boolean, example: true, description: 'has variant available stock or not' }, isWinnerBuyBox: { type: boolean, example: true, description: 'is variant winner of buy-box or not' }, isGold: { type: boolean, example: true, description: 'always true' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { variant_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, gold_profit: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, gold_wage: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/activation': { put: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'Edit seller variant activation status.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: variant_id, description: 'variant id', required: true, example: 1234, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { activation: { type: boolean, example: true, description: 'new activation status' } }, required: [activation] }, example: { activation: true } } } }, responses: { 200: { description: UpdateProductVariantActivationForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { id: { type: integer, example: 12345, description: 'variant id' }, image_src: { type: string, example: 'https://dkstatic-public-demo.digikala.com/digikala-products/8c65efa85d4dd5a0d763d6b0cba6a7cb2d26c9_1717921911.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60', description: '' }, seller_id: { type: integer, example: 1234, description: '' }, main_category_title: { type: string, example: 'هودی زنانه', description: '' }, category_id: { type: integer, example: 12134, description: '' }, product_id: { type: integer, example: 1234, description: '' }, product_url: { type: string, example: 'https://demo.digikala.com/product/dkp-134/', description: '' }, product_variant_id: { type: integer, example: 1234, description: '' }, supplier_code: { type: string, example: 123-c, description: '' }, product_moderation_status: { type: string, example: edit_after_approved, description: '' }, title: { type: string, example: 'هودی زنانه مدل تست رعنا ادیت سلر | ف| گارانتی سلامت فیزیکی کالا', description: '' }, product_title: { type: string, example: 'هودی زنانه مدل تست رعنا ادیت سلر', description: '' }, active: { type: boolean, example: false, description: '' }, lead_time: { type: integer, example: 3, description: 'time to send the variant to warehouse' }, price_list: { type: integer, example: 2666800, description: 'reference price' }, market_price_last_update: { type: string, example: '2024-07-28 13:52:06', description: '' }, price_type: { type: string, example: recommended, description: '' }, selling_channel_site: { type: string, example: digikala, description: 'site for selling' }, price_sale: { type: integer, example: 2345600, description: 'selling price' }, marketplace_seller_stock: { type: integer, example: 12, description: 'stock with the seller' }, warehouse_stock: { type: integer, example: 1, description: 'stock in warehouse' }, on_the_way_stock: { type: integer, example: 1, description: 'number of that variant which has not been completely received' }, reservation: { type: integer, example: 1, description: '' }, left_consumer: { type: integer, example: 12, description: 'available number of that variant to be sold' }, maximum_per_order: { type: integer, example: 12, description: 'maximum number of that variant in an order' }, allowed_count: { type: integer, example: 1, description: 'maximum consignment' }, ovl_selling_active: { type: boolean, example: true, description: '' }, b2b_params: { type: object, description: '', properties: { seller_b2b_active: { type: boolean, example: true, description: 'does the seller have b2b module active' }, is_only_b2b: { type: boolean, example: false, description: 'is the variant only b2b' }, is_b2b_active: { type: boolean, example: false, description: 'is b2b selling active for variant' } } }, max_lead_time: { type: integer, example: 3, description: 'maximum time to send the variant to warehouse' }, buy_box_price: { type: integer, example: 10000, description: 'buybox price' }, is_buy_box_winner: { type: boolean, example: false, description: 'is this variant buybox winner' }, is_seller_buy_box_winner: { type: boolean, example: false, description: 'is the seller buybox winner(maybe their other variant)' }, is_in_buy_box_challenge: { type: boolean, example: false, description: 'does the variant have competition' }, min_selling_price_limit: { type: integer, example: 1000, description: 'minimum selling price' }, product_selling_chanel: { type: object, description: '', properties: { active_digikala: { type: boolean, example: true, description: 'can the variant be sold at digikala' }, active_digistyle: { type: boolean, example: false, description: 'can the variant be sold at digistyle' } } }, variant_selling_chanel: { type: object, description: '', properties: { active_digikala: { type: boolean, example: false, description: 'if the variant''s selling is active on digikala' }, active_digistyle: { type: boolean, example: false, description: 'if the variant''s selling is active on digistyle' } } }, is_in_incredible_promotion: { type: boolean, example: false, description: 'is the variant in incredible promotion' }, is_in_periodic_promotion: { type: boolean, example: false, description: 'if the variant has smart periodic prices' }, is_in_promotion: { type: boolean, example: false, description: 'if the variant is in promotion' }, promotion_price: { type: integer, example: 10000, description: 'price in promotion' }, shipping_nature_id: { type: integer, example: 1, description: 'nature of the shipping which can be 1 2 or 3' }, default_selling_chanel_code: { type: integer, example: 1, description: 'the default selling channel for that variant (digikala, digistyle, ..)' }, rating: { type: double, example: 1.5, description: 'rating of that variant' }, is_promotion_management_visible_for_seller: { type: boolean, example: true, description: 'can seller see the promotion modal' }, is_archived: { type: boolean, example: false, description: 'is the variant archived' }, fulfilment_and_delivery_cost: { type: integer, example: 164192, description: 'cost of fulfilling and delivering the variant' }, seller_reservation: { type: integer, example: 1, description: 'the reserved amount at seller' }, digikala_reservation: { type: integer, example: 1, description: 'the reserved amount at digikala' }, seller_shipping_lead_time: { type: integer, example: 1, description: 'time for when seller sends the variant to customer' }, shipping_options: { type: object, description: '', properties: { is_fbs_ability_enable: { type: boolean, example: true, description: 'can the seller become sbs' }, is_fbd_active: { type: boolean, example: true, description: 'is selling by digikala is active' }, is_fbs_active: { type: boolean, example: false, description: 'is selling by seller is active' }, is_needed_fbs_setting: { type: boolean, example: false, description: 'does the seller needs defining sbs setting' }, is_sbs_module_active: { type: boolean, example: true, description: 'if the seller has an active sbs module' }, only_sbs: { type: boolean, example: false, description: 'if the variant should be only sold by seller' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { activation: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, variant_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/b2b-prices': { get: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'Get B2B Modal Data for Variant.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: variant_id, description: 'variant id', required: true, example: 1234, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProductVariantB2BModalObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { active: { type: boolean, example: false, description: 'if b2b is active' }, buckets: { type: array, description: 'buckets of b2b, ranges of number sold and its price in that range', items: { type: object, properties: { min: { type: integer, example: 1, description: 'starting point of the range' }, max: { type: integer, example: 10, description: 'ending point of the range' }, sellingPrice: { type: integer, example: 10000, description: 'selling price' } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { variant_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false }, put: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'Edit seller variant b2b prices data.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: variant_id, description: 'variant id', required: true, example: 1234, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { active: { type: boolean, example: true, description: 'should b2b be active or not' }, b2b_prices: { type: array, items: { type: object, description: '', properties: { min: { required: true, type: integer, description: 'starting point of the range', example: 1 }, max: { required: true, type: integer, description: 'ending point of the range', example: 10 }, selling_price: { required: true, type: integer, description: 'selling price within the range', example: 10000 } } }, required: true, description: 'buckets of b2b, ranges of number sold and its price in that range' } }, required: [active, b2b_prices] }, example: { active: true, b2b_prices: {  } } } } }, responses: { 200: { description: UpdateProductVariantB2BPricesForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { message: { type: string, description: 'fixed response on success', example: success } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { variant_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, b2b_prices: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, active: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/archive': { put: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'Archive variant.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: variant_id, description: 'product variant id', required: true, example: 1234, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { archive: { type: boolean, example: true, description: 'should the variant be archived or not' } }, required: [archive] }, example: { archive: true } } } }, responses: { 200: { description: ArchiveProductVariantForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { message: { type: string, description: 'fixed response on success', example: success } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/seller-stock': { patch: { tags: ['Product Variant (13)'], summary: 'Scopes => variant', description: 'Update variant seller-stock amount', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: variant_id, description: 'seller variant Id', required: true, example: 12345, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { seller_stock: { type: integer, example: 10, description: 'Stock amount. It must be Absolute value (after successful update, this value will be replaced by the old stock.' } }, required: [seller_stock] }, example: { seller_stock: 10 } } } }, responses: { 200: { description: UpdateVariantStockForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { selling_stock: { type: integer, example: 10, description: 'All stock that customer can bought (Sellable Stock)' }, marketplace_seller_stock: { type: integer, example: 10, description: 'All the Stock that is in Seller Warehouse (Not in DK warehouses)' }, dk_warehouse_stock: { type: integer, example: 20, description: 'All the variant stock that is delivered and stored in DK warehouses)' }, digikala_reservation: { type: integer, example: 1, description: 'All the variant reservation that will be fulfilled by Digikala' }, seller_reservation: { type: integer, example: 5, description: 'All the variant reservation that will be fulfilled by seller himself/herself' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { variant_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, seller_stock: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/orders: { get: { tags: ['Order (9)'], summary: 'Scopes => order', description: 'getting details of all active order items seller', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 50 } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { type: string, default: order_created_at, enum: [order_created_at] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: desc } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: AllSellerDigikalaOrderListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: order_created_at }, sort_order: { type: string, description: 'acs or desc', example: desc }, sort_columns: { type: array, description: 'name of sort columns', example: [order_created_at] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { product_variant_id: { type: integer, example: 1234, description: 'variant id' }, product_image_url: { type: string, example: 'http://dkstatics-public.digikala.com/digikala-products/c72042c9bb6b8795f6094e07837edf9f00_1613546028.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60', description: 'url to product image' }, product_variant_title: { type: string, example: 'کتاب | گارانتی اصالت و سلامت فیزیکی کالا', description: 'title of product variant' }, supplier_code: { type: string, example: sc01, description: 'supplier code of variant' }, order_id: { type: integer, example: 12345, description: 'order id' }, order_created_at: { type: string, example: '2024-07-31T13:40:31.000000+04:30', description: 'created_at of order item' }, warehouse_status_at: { type: string, example: '2024-07-31T13:45:03.000000+04:30', description: 'warehouse_status_at of order, when order located at warrehouse and start to be processed' }, commitment_date: { type: string, example: '2024-08-04T00:00:00.000000+04:30', description: 'The date by which the seller must send the required quantity of variants for the order to the warehouse' }, quantity: { type: integer, example: 1, description: 'quantity of order items in the order' }, selling_price: { type: integer, example: 645800, description: 'selling price of order item' }, amazing_discount: { type: integer, example: 1200, description: 'discount value of order item multiply by its quantity' }, discount_manager: { type: integer, example: 123, description: 'amount of discount that manager set for variant' }, total_price: { type: integer, example: 645800, description: 'selling price multiply by order item quantity minus manger discount' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/orders/statistics: { get: { tags: ['Order (9)'], summary: 'Scopes => order', description: 'api for getting count of shipped by digikala and shipped by seller orders count', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerOrderStatisticsObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { all_shipped_by_dk: { type: integer, description: 'count all orders that are shipped by dk', example: 123 }, shipped_by_seller_count: { type: integer, description: 'count all orders that are shipped by seller', example: 123 } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/orders/ongoing: { get: { tags: ['Order (9)'], summary: 'Scopes => order', description: 'List of Order items per variants.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 50 } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { type: string, default: order_items.commitment_date, enum: [order_items.commitment_date, order_items.order_id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: asc } }, { in: query, name: 'search[multi_search]', description: 'multi search in variant id, title of product, product id and supplier code', required: false, example: 'شلوار سفید', schema: { type: string } }, { in: query, name: 'search[category_ids]', description: 'Comma seperated category ids.', required: false, example: '123, 456', schema: { type: 'string,integer' } }, { in: query, name: 'search[shipping_nature_ids]', description: 'Comma seperated shipping nature ids. it must be in 1 or 3 or 2', required: false, example: null, schema: { type: 'string,integer', enum: [1, 3, 2] } }, { in: query, name: 'search[has_warehouse_stock]', description: 'does variant has warehouse stock or not', required: false, example: null, schema: { type: 'integer,enum', enum: [1, 0] } }, { in: query, name: 'search[is_past_and_today]', description: 'for selecting order items that their commitment_date is for today or past', required: false, example: null, schema: { type: 'integer,enum', enum: [1, 0] } }, { in: query, name: 'search[is_processing_status]', description: 'for selecting order items that their order status is equal to processing status', required: false, example: null, schema: { type: 'integer,enum', enum: [1, 0] } }, { in: query, name: 'search[to_commitment_date]', description: 'or selecting orders whose commitment_date is on or before this date', required: false, example: null, schema: { type: 'string,date' } }, { in: query, name: 'search[selected_variant_ids]', description: 'it is used to see different variants id in different pages(it is used in ui)', required: false, example: null, schema: { type: 'string,integer' } }, { in: query, name: 'search[is_committed]', description: 'for selecting order items that seller should prepare them and doesn''t have enough stock', required: false, example: null, schema: { type: 'integer,enum', enum: [1, 0] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerDigikalaOrderListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: order_items.commitment_date }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [order_items.commitment_date, order_items.order_id] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { variant_id: { type: integer, description: 'id of variant', example: 2134 }, image_src: { type: string, description: 'link to variant image', example: 'http://dkstatics-public.digikala.com/digikala-products/c72042c9bb6b8795f6094e07837edf9f00_1613546028.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60' }, title: { type: string, description: 'title of variant', example: 'کالای خواب' }, shipping_nature: { type: object, description: 'shipping nature of variant(either small, medium or large)', properties: { key: { type: string, description: 'shipping nature of variant in en', example: small, enum: [small, medium, large] }, title: { type: string, description: 'translation of shipping nature of variant', example: کوچک } } }, product_link: { type: string, description: 'link to product in dk site', example: 'http://digikala.com/product/dkp-12345' }, product_id: { type: integer, description: 'id of product', example: 1234 }, supplier_code: { type: string, description: 'supplier_code of variant', example: s1 }, order_count: { type: integer, description: 'sum of quantity of all order items of variant', example: 123 }, all_commitment: { type: integer, description: 'sum of all dk orders commitments for seller(based on order items quantity that should be supplied)', example: 123 }, commitment_past: { type: integer, description: 'count of all past commitment(based on order items quantity that should be supplied)', example: 123 }, commitment_past_and_today: { type: integer, description: 'count all commitment of today and past for seller', example: 123 }, commitment_future: { type: integer, description: 'count of all future commitments of seller', example: 123 }, available_stock: { type: integer, description: 'available stock of variant(warehouse_stock + warehouse_supply_stock + on the way stock of variant)', example: 123 }, order_item_ids: { type: array, description: 'all order item ids of variant', items: { type: integer, description: 'order item id', example: 1234 } }, can_create_package: { type: integer, description: 'a flag for detecting that seller can create package or not(based on selected filters and if variabt have enough available stocks or not)', example: 1, enum: [0, 1] } } } }, meta_data: { type: object, description: 'meta data', properties: { filters: { type: object, description: 'contains data about filter widgets', properties: { leaf_categories: { type: object, description: 'seller inventory categories', properties: { category_id: { type: string, description: 'map category id to category_title', example: موبایل } } }, package_creation_dates: { type: object, properties: { small: { type: integer, description: 'the most count of days after tomorrow that seller can create package for tomorrow commitments(for small shipping nature variants)' }, medium: { type: integer, description: 'the most count of days after tomorrow that seller can create package for tomorrow commitments(for medium shipping nature variants)' }, heavy: { type: integer, description: 'the most count of days after tomorrow that seller can create package for tomorrow commitments(for heavy shipping nature variants)' } } }, today_and_past_order_items_commitment_count: { type: integer, description: 'count of committed order items(sum of quantity) for seller that their commitment_dates are for past or today and its shipment is by dk' }, tomorrow_order_items_commitment_count: { type: integer, description: 'count of committed order items(sum of quantity) for seller that their commitment_dates are for tomorrow its shipment is by dk' }, available_stock_count: { type: integer, description: 'count of all available stock of seller variants either warehouse_stock, warehouse_supply_stock or on the way stock' }, unavailable_stock_count: { type: integer, description: 'count of all variants that seller should delivered to warehouse' }, small_shipping_nature_count: { type: integer, description: 'count of all is committed variants that has small shipping nature' }, medium_shipping_nature_count: { type: integer, description: 'count of all is committed variants that has medium shipping nature' }, heavy_shipping_nature_count: { type: integer, description: 'count of all is committed variants that has heavy shipping nature' }, warehouse_processing_count: { type: integer, description: 'count of order items that their orders have status warehouse_processing (t is being processed in the warehouse.")' } } }, ovl: { type: object, description: 'data about seller''s ovl', properties: { is_active: { type: boolean, description: 'indicate that seller ovl is active or not' }, limit: { type: integer, description: 'ovl of seller amount' }, daily_sales: { type: integer, description: 'daily sales of seller if last ovl changed at of seller is for today' } } }, modules: { type: object, description: 'data about seller modules', properties: { ship_by_seller: { type: integer, description: 'if seller has ship by seller module active is one, otherwise zero' } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/orders/ongoing/statistics: { get: { tags: ['Order (9)'], summary: 'Scopes => order', description: 'count of commitments of ship by digikala orders per day', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: to_commitment_date, description: 'iso formatted date for to commitment date', required: false, example: '2024-06-20', schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerDigikalaOrderStatisticsObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { tomorrow_order_items_commitment_count: { type: integer, description: 'order items count that have commitment date for tomorrow', example: 123 }, future_per_days_is_committed_orders_count: { type: object, description: 'mapping date to orders count', properties: { date: { type: string, description: 'orders count on this date', example: 12 } } }, package_creation_date: { type: integer, description: 'Maximum number of days allowed for the seller to create a package from today into the future.' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/orders/history: { get: { tags: ['Order (9)'], summary: 'Scopes => order', description: 'Get history of all seller orders', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 50 } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { type: string, default: id, enum: [id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: asc } }, { in: query, name: order_type, description: '', required: false, example: processed, schema: { type: string, enum: [processed, returned, canceled] } }, { in: query, name: category_id, description: '', required: false, example: 123, schema: { type: integer } }, { in: query, name: order_created_at_to, description: 'format -> Y-m-d\TH:i:s.uP', required: false, example: '2017-07-21T17:32:28Z', schema: { type: string } }, { in: query, name: order_created_at_from, description: 'format -> Y-m-d\TH:i:s.uP', required: false, example: '2017-07-21T17:32:28Z', schema: { type: string } }, { in: query, name: exit_from_warehouse_date_to, description: 'format -> Y-m-d\TH:i:s.uP', required: false, example: '2017-07-21T17:32:28Z', schema: { type: string } }, { in: query, name: exit_from_warehouse_date_from, description: 'format -> Y-m-d\TH:i:s.uP', required: false, example: '2017-07-21T17:32:28Z', schema: { type: string } }, { in: query, name: returned_to_warehouse_date_to, description: 'format -> Y-m-d\TH:i:s.uP', required: false, example: '2017-07-21T17:32:28Z', schema: { type: string } }, { in: query, name: returned_to_warehouse_date_from, description: 'format -> Y-m-d\TH:i:s.uP', required: false, example: '2017-07-21T17:32:28Z', schema: { type: string } }, { in: query, name: shipping_type, description: '', required: false, example: digikala, schema: { type: string, enum: [seller, digikala] } }, { in: query, name: search_text_all, description: 'field for searching in serial, order_shipment_id, product_id, product_supplier_code or variant_id', required: false, example: 1234, schema: { type: 'string,integer' } }, { in: query, name: b2b_active, description: 'be true if seller select it(shown if seller has b2b panel active)', required: false, example: true, schema: { type: boolean } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: OrderHistoryListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { product_variant_title: { type: string, description: 'The title of variant that customer bought', example: 'کامپیوتر همه کاره 24 اینچی مایا مدل MA24D 12M - i7 16GB 500SSD | مشکی | گارانتی 12 ماهه ماتریس' }, product_id: { type: int, description: 'Product ID', example: 1234 }, product_variant_id: { type: int, description: 'Product variant ID', example: 5443121 }, order_id: { type: int, description: 'Order ID', example: 112736712 }, shipment_id: { type: int, description: 'The shipment that handle shipping the order detail ID', example: 1231218721 }, order_created_at: { type: string, description: 'The datetime that customer click on confirm order', example: '2024-08-07T13:01:10+03:30' }, order_status: { type: json, description: 'The status of order', example: { key: confirmed, title: 'نهایی شده' } }, category: { type: string, description: 'The category of the product that customer bought', example: 'کامپیوترهای All-in-One' }, product_supplier_code: { type: string, description: 'The seller code that sellers put on their variants', example: '123213' }, product_url: { type: string, description: 'The product url in digikala', example: 'https://www.digikala.com/product/dkp-16006355/' }, image_src: { type: string, description: 'The image of the product', example: 'https://dkstatics-public.digikala.com/digikala-products/01110fb7b45ba0b6313f9deaadea30767dc75547_1720431657.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60' }, payment_type: { type: json, description: 'The status of payment(it can be credit or cash)', example: { key: cash, title: نقدی } }, sell_type: { type: json, description: 'The selling type of order like b2c or b2b', example: { key: b2b, title: سازمانی } }, shipping_type: { type: json, description: 'Shipping type(seller, digikala)', example: { key: seller, title: فروشنده } }, unit_discount: { type: int, description: 'Discount for each item', example: 100000 }, unit_price: { type: int, description: 'Price for each item', example: 120000000 }, lead_time: { type: int, description: 'The days seller needs to deliver to customer', example: 3 }, serials: { type: array, description: 'The items exist in an order item', example: { serial: { type: string, description: 'Each object has a serial and it will be unique', example: A2134324 }, order_shipped_at: { type: string, description: 'The time that deliver picked serial from warehouse', example: '2024-08-07T13:01:10+03:30' }, return_to_warehouse_at: { type: string, description: 'The time that serial returned to the warehouse', example: '2024-08-07T13:01:10+03:30' }, warehouse_title: { type: string, description: 'warehouse title or seller', example: 'انبار دانش' }, serial_status: { type: json, description: [pending, processing, processed, return_pending, return_processing, return_processed], example: processed }, return_reason: { type: string, description: 'The reason for return to warehouse', example: 'خرابی کالا' } } }, quantity: { type: int, description: 'The quantity of the objects in a order item', example: 5 }, discount_type: { type: string, description: 'Discount type', example: gift }, total_price: { type: int, description: 'The total price of order items with all items', example: 30000000000 } } } }, meta_data: { type: object, description: 'meta data', properties: { all_categories: { type: object, description: 'list of categories', properties: { category_id: { type: string, description: 'map category id to category_title', example: موبایل } } }, b2b_active: { type: boolean, description: 'flag for detecting that seller has b2b panel active or not', example: true } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/orders/excel/export: { post: { tags: ['Order (9)'], summary: 'Scopes => order', description: 'Excel Export API for Details of Orders per variant', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { search: { type: object, properties: { has_warehouse_stock: { type: boolean, example: true, description: 'is there warehouse stock for the order or not' }, is_processing_status: { type: boolean, example: true, description: 'is order in process or not' }, is_committed: { type: boolean, example: true, description: 'is order fulfilled by seller' }, is_past_today: { type: boolean, example: true, description: 'is commitment date passed or not' }, to_commitment_date: { type: string, example: '2023-10-24T00:00:00.000Z', description: 'filter orders till this commitment date' }, category_ids: { type: string, example: '1,2,3', description: 'orders in this category ids (comma separated)' }, shipping_nature_id: { type: string, example: '1,2,3', description: 'orders with these shipping nature ids (comma separated)' }, multi_search: { type: string, example: test, description: 'search orders that their product title or ids is similar to keyword' } }, required: {  }, description: 'filter items' }, sort: { type: string, example: order_items.commitment_date, description: 'Sort results based on this field' }, order: { type: string, example: asc, description: 'define Order of sorting' } }, required: {  } }, example: { search: { has_warehouse_stock: true, is_processing_status: true, is_committed: true, is_past_today: true, to_commitment_date: '2023-10-24T00:00:00.000Z', category_ids: '1,2,3', shipping_nature_id: '1,2,3', multi_search: test }, sort: order_items.commitment_date, order: asc } } } }, responses: { 200: { description: SellerDigikalaOrdersExcelExportForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { message: { type: string, description: 'success message', example: 'لینک گزارش درخواستی تا دقایقی دیگر به ایمیل ثبت شده‌ی شما ارسال می‌شود.' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/orders/{order_item_id}': { delete: { tags: ['Order (9)'], summary: 'Scopes => order', description: 'used for cancelling order item of seller', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: order_item_id, description: 'id of order item that is going to be canceled', required: true, example: 123, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { cancellation_reason_id: { type: integer, example: 123, description: 'id of cancellation reason, (-1: out of stock, 30: wrong selling price, 39: seller suspended)' }, count: { type: integer, example: 123, description: 'count of stocks that is going to be canceled for out of stock reason' } }, required: [cancellation_reason_id] }, example: { cancellation_reason_id: 123, count: 123 } } } }, responses: { 200: { description: SellerCancelDigikalaOrderItemForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { message: { type: string, example: 'order was cancelled successfully', description: 'message that showed order is was canceled successfully' }, status: { type: string, example: ok, description: 'status of api result either ok or error' }, code: { type: integer, example: 200, description: 'status code of api' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { orderItemId: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, cancellationReasonId: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/order-items': { get: { tags: ['Order (9)'], summary: 'Scopes => order', description: null, parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: variant_id, description: null, required: true, example: null, schema: { type: null } }, { in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 50 } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { type: string, default: commitment_date, enum: [commitment_date, order_created_at] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: asc } }, { in: query, name: 'search[multi_search]', description: 'for now it just search in order id', required: false, example: null, schema: { type: integer } }, { in: query, name: 'search[send_past_and_today]', description: 'for selecting past and today is committed order of variant', required: false, example: null, schema: { type: integer } }, { in: query, name: 'search[to_order_item_commitment_date]', description: 'for selecting to commitment_date of order item of variant', required: false, example: null, schema: { type: string } }, { in: query, name: 'search[order_type]', description: 'for filtering on order status and shipment status', required: false, example: null, schema: { type: 'string,enum', enum: [in_review, processing, ready_to_process] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: VariantOrdersListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { order_id: { type: integer, description: 'id of order', example: 123 }, order_item_created_at: { type: string, description: 'order item create at in format Y-m-d\TH:i:s.uP', example: '2020-18-14' }, warehouse_status_at: { type: string, description: 'warehouse_status_at of order in format Y-m-d\TH:i:s.uP', example: '2020-18-14' }, quantity: { type: integer, description: 'quantity of order item', example: 123 }, commitment_date: { type: string, description: 'commitment date of order item', example: '2020-18-14' }, selling_price: { type: integer, description: 'selling price of variant price variant', example: 123000 }, amazing_discount: { type: integer, description: 'discount value of order multiply by quantity of order item', example: 123000 }, total_price: { type: integer, description: 'selling price multiply by quantity of order item', example: 123000 }, can_be_canceled: { type: boolean, description: 'one if seller can canceled order other wise zero(processing orders can''t be canceled)', example: true } } } }, meta_data: { type: object, description: 'meta data', properties: { filter: { type: object, description: 'statistics for filters widget', properties: { today_and_past_commitments_count: { type: integer, description: 'count of is committed orders of variant that have commitment_date lte today' }, tomorrow_commitments_count: { type: integer, description: 'count of is committed orders of variant that have commitment_date gt today' } } }, cancellation_reasons: { descriptions: 'mapping of id to title of all possible order item cancellation reasons', type: object, properties: { id: { type: object, description: 'id of cancellation reason', properties: { key: { type: string, description: 'english title of cancellation reason' }, title: { type: string, description: 'persian title of cancellation reason' } } } } }, product_image_url: { type: string, description: 'link to product image' }, product_id: { type: integer, description: 'id of product' }, product_title: { type: string, description: 'title of product' }, product_url: { type: string, description: 'link to product on dk site' }, variant_id: { type: string, description: 'id of variant' }, variant_url: { type: string, description: 'link to product config page on seller panel' }, supplier_code: { type: string, description: 'supplier_code of variant' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/variants/{variant_id}/order-items/statistics': { get: { tags: ['Order (9)'], summary: 'Scopes => order', description: 'give commitments of variant orders per day', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: variant_id, description: null, required: true, example: null, schema: { type: null } }, { in: query, name: to_commitment_date, description: 'iso formatted date for to commitment date', required: false, example: '2024-06-20', schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: VariantDigikalaOrderStatisticsObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { tomorrow_commitments_count: { type: integer, description: 'count of tomorrow commitments count', example: 123 }, is_committed_tomorrow_orders_per_day: { type: object, description: 'count of orders per day', properties: { date: { type: string, description: 'orders count on this date', example: 1234 } } }, package_creation_date: { type: integer, description: 'allowed package creation date', example: 12 } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { variantId: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/inventories: { get: { tags: ['Inventories (4)'], summary: 'Scopes => inventory', description: 'Get Inventories', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: 'search[stock_status]', description: null, required: false, example: null, schema: { type: string, enum: [has_warehouse_stock, has_not_warehouse_stock, has_marketplace_seller_stock, has_not_marketplace_seller_stock, soon_out_of_stock] } }, { in: query, name: 'search[selling_stock]', description: 'selling stock must be 0, 1', required: false, example: null, schema: { type: integer } }, { in: query, name: 'search[active]', description: 'active must be 0, 1', required: false, example: null, schema: { type: integer } }, { in: query, name: 'search[category_id]', description: 'category id', required: false, example: null, schema: { type: integer } }, { in: query, name: 'search[search_field]', description: 'search filed must {product_id, product_variant_id and serial}', required: false, example: null, schema: { type: string } }, { in: query, name: 'search[product_filter]', description: null, required: false, example: null, schema: { type: string, enum: [has_dead_stock, active, inactive] } }, { in: query, name: 'search[warehouse_filter]', description: null, required: false, example: null, schema: { type: string, enum: [1, 50, 28, 48, others] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerInventoriesListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { category_title: { type: string, example: 'هودی زنانه', description: '' }, supplier_code: { type: string, example: s1, description: '' }, product_id: { type: integer, example: 1234, description: '' }, product_variant_id: { type: integer, example: 132455, description: '' }, title: { type: string, example: 'هودی زنانه مدل تست رعنا ادیت سلر | فری سایز (42-46) | گارانتی سلامت فیزیکی کالا', description: '' }, marketplace_seller_stock: { type: integer, example: 10, description: '' }, warehouse_stock: { type: integer, example: 1, description: '' }, available: { type: integer, example: 10, description: '' }, reserve: { type: integer, example: 1, description: '' }, warehouse: { type: array, description: '', items: { type: integer, example: 123 } }, img_src: { type: string, example: 'http://dkstatic-public-demo.digikala.com/digikala-products/8c6efa85d5a0d763d6b0cba6a7cb2d26c9_1717921911.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60', description: '' }, shipping_nature: { type: string, example: کوچک, description: '' }, shipping_nature_id: { type: integer, example: 1, description: '' }, product_url: { type: string, example: 'http://digikala.com/product/dkp-11234/', description: '' }, supply_stock: { type: integer, example: 1, description: '' }, has_rts_package: { type: boolean, example: false, description: '' }, has_dead_stock: { type: boolean, example: false, description: '' }, hasRtsStock: { type: boolean, example: false, description: '' }, has_checkbox_for_rts: { type: boolean, example: false, description: '' } } } }, meta_data: { type: object, description: 'meta data', properties: { categories: { type: object, description: '', properties: { 114: { type: string, example: 'کتاب آموزش عکاسی و راهنمای دوربین', description: '' }, 150: { type: string, example: 'فیلم سینمایی', description: '' }, 152: { type: string, example: 'کتاب صوتی', description: '' }, 5695: { type: string, example: 'مجموعه آموزشی', description: '' }, 5880: { type: string, example: 'باتری استاندارد', description: '' }, 5912: { type: string, example: 'حقوق و مدیریت', description: '' }, 5919: { type: string, example: 'مجلات خارجی', description: '' }, 5980: { type: string, example: 'خودکار و روان نویس', description: '' }, 6029: { type: string, example: 'بازی فکری', description: '' }, 6030: { type: string, example: 'بازی آموزشی', description: '' }, 6035: { type: string, example: پازل, description: '' }, 6084: { type: string, example: 'مجلات داخلی', description: '' }, 6129: { type: string, example: 'تجهیزات جانبی سفر و کمپینگ', description: '' }, 6238: { type: string, example: سالنامه, description: '' }, 6305: { type: string, example: 'کاسه و پیاله', description: '' }, 8934: { type: string, example: 'منبت کاری', description: '' }, 9277: { type: string, example: پیکسل, description: '' }, 9335: { type: string, example: 'هودی زنانه', description: '' }, 9529: { type: string, example: 'ساعت عقربه ای مردانه', description: '' }, 9558: { type: string, example: 'ساعت عقربه ای زنانه و مردانه', description: '' }, 9882: { type: string, example: 'نقشه چاپی', description: '' }, 9908: { type: string, example: 'کفش روزمره زنانه', description: '' }, 10143: { type: string, example: 'کتاب چاپی غیر فارسی', description: '' }, 10490: { type: string, example: 'کتاب کودک و نوجوان', description: '' }, 10553: { type: string, example: 'کتاب زندگینامه و دایره المعارف', description: '' }, 10554: { type: string, example: 'کتاب علوم کاربردی، تکنولوژی و مهندسی', description: '' }, 10556: { type: string, example: 'کتاب تاریخ و جغرافیا', description: '' }, 10557: { type: string, example: 'کتاب فلسفه و روانشناسی', description: '' }, 10558: { type: string, example: 'کتاب درسی، کمک‌درسی و آزمون', description: '' }, 10559: { type: string, example: 'کتاب زبان', description: '' }, 10560: { type: string, example: 'کتاب هنر و سرگرمی', description: '' }, 10561: { type: string, example: 'کتاب دینی', description: '' }, 10562: { type: string, example: 'کتاب علوم اجتماعی', description: '' }, 10563: { type: string, example: 'کتاب شعر و ادبیات', description: '' } } }, items_has_rts: { type: boolean, example: true, description: '' }, warehouses: { type: object, description: '', properties: { 1: { type: string, example: 'انبار دانش', description: '' }, 28: { type: string, example: 'انبار مرجوعی مرکزی', description: '' }, 48: { type: string, example: 'انبار مرجوعی لارج', description: '' }, 50: { type: string, example: 'انبار بادامک', description: '' }, others: { type: string, example: سایر, description: '' } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/inventories/{product_variant_id}': { get: { tags: ['Inventories (4)'], summary: 'Scopes => inventory', description: 'Get Inventories Dead Stock.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: product_variant_id, description: null, required: true, example: null, schema: { type: null } }, { in: query, name: 'search serial', description: '', required: false, example: 6FEA3192, schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerInventoriesDeadStockListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { item_serial: { type: string, example: 6FEA3192, description: '' }, age: { type: integer, example: 1, description: '' }, is_passed_discount_period: { type: string, example: خیر, description: '' }, discount_period: { type: string, example: 30, description: '' }, current_warehouse_title: { type: string, example: 'انبار دانش', description: '' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/inventories/{product_variant_id}/export': { get: { tags: ['Inventories (4)'], summary: 'Scopes => inventory', description: 'Export product variant inventory detail', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: product_variant_id, description: null, required: true, example: null, schema: { type: null } }, { in: query, name: 'search[product_variant_id]', description: null, required: false, example: null, schema: { type: integer } }, { in: query, name: 'search[serial]', description: null, required: false, example: null, schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerInventoriesDetailExcelExportView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { fileName: { type: string, description: 'name of file', example: excel2323.xlsx }, excelFile: { type: string, format: binary, description: file, example: (binary) } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { product_variant_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/inventories/export: { post: { tags: ['Inventories (4)'], summary: 'Scopes => inventory', description: 'Send an Excel file to Seller about his/her Inventory Data', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { stock_status: { type: string, example: has_warehouse_stock, description: 'status of stock' }, selling_stock: { type: boolean, example: '0', description: 'is variant have selling stock or not' }, active: { type: boolean, example: '0', description: 'is variant active or not' }, category_id: { type: integer, example: 123, description: 'filter based on category id' }, search_field: { type: mixed, example: 123, description: 'filter based on this keyword' }, product_filter: { type: string, example: has_dead_stock, description: 'search by variant status' }, warehouse_filter: { type: integer, example: 1, description: 'search by variant warehouse id' } }, required: {  } }, example: { stock_status: has_warehouse_stock, selling_stock: '0', active: '0', category_id: 123, search_field: 123, product_filter: has_dead_stock, warehouse_filter: 1 } } } }, responses: { 200: { description: SellerInventoriesExcelExportForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { message: { type: string, description: 'success message', example: 'لینک گزارش درخواستی تا دقایقی دیگر به ایمیل ثبت شده‌ی شما ارسال می‌شود.' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/packages: { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'list of seller packages', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 10 } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { type: string, default: created_at, enum: [id, created_at] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: desc } }, { in: query, name: 'search[multi_search]', description: 'searching in package number or serial or supplier_code or package status', required: false, example: null, schema: { type: 'string,integer' } }, { in: query, name: 'search[type]', description: 'type of package', required: false, example: null, schema: { type: 'string,enum', enum: [order_fulfilment, consignment] } }, { in: query, name: 'search[status]', description: null, required: false, example: null, schema: { type: 'string,enum', enum: [new, received, partially_received, rejected, error, deleted] } }, { in: query, name: 'search[delivery_type]', description: 'delivery type of package', required: false, example: null, schema: { type: 'string,enum', enum: [seller, digikala, mobile_hub, post, compensation] } }, { in: query, name: 'search[package_created_at_from]', description: 'created at of package from(na baba!!) in js iso format', required: false, example: null, schema: { type: string } }, { in: query, name: 'search[package_created_at_to]', description: 'created at of package ins iso format', required: false, example: null, schema: { type: string } }, { in: query, name: 'search[package_received_at_from]', description: 'created at of package from(na baba!!) in js iso format', required: false, example: null, schema: { type: string } }, { in: query, name: 'search[package_received_at_to]', description: 'received at of package ins iso format(ghavi)', required: false, example: null, schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: PackageListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: created_at }, sort_order: { type: string, description: 'acs or desc', example: desc }, sort_columns: { type: array, description: 'name of sort columns', example: [id, created_at] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { package_id: { type: integer, description: 'google it' }, package_number: { type: string, description: 'number of package', example: '910551301223010' }, type: { type: object, description: 'type of package', properties: { key: { type: string, description: 'type en', example: order_fulfilment }, title: { type: string, description: 'type fa', example: سفارش } } }, shipping_nature: { type: object, description: 'shipping nature of package', properties: { key: { type: string, description: 'shipping nature en', example: small }, title: { type: string, description: 'shipping nature fa', example: کوچک } } }, status: { type: object, description: 'status of package', properties: { key: { type: string, description: 'status in english', example: new }, title: { type: string, description: 'status in persian', example: 'آماده ارسال/تحویل' } } }, delivery_type: { type: object, description: 'delivery type of package', properties: { key: { type: string, description: 'delivery type in english', example: mobile_hub }, title: { type: string, description: 'delivery type in persian', example: 'نحویل به انبار سیار' } } }, created_at: { type: string, description: 'created_at of package in iso format', example: '2023-12-30T19:21:33.000000+03:30' }, received_at_forecast: { type: string, description: 'received at forecast of package in iso format', example: '2023-12-30T19:21:33.000000+03:30' }, received_at: { type: string, description: 'received at of package in iso fromat', example: '2023-12-30T19:21:33.000000+03:30' }, warehouse: { type: object, properties: { id: { type: integer, description: 'id of mobile hub if delivery type of package is mobile hub, if delivery type is digikala it is seller warehouse id otherwise it is warehouse id' }, title: { type: string, description: 'title of warehouse' } } }, is_shippable_by_dk: { type: boolean, description: 'flag that shown that seller can create shipment for package or not', example: true }, time_cope: { type: object, description: 'time scope of packages', properties: { start: { type: integer, description: 'time scope starts at in hour', example: 12 }, end: { type: integer, description: 'time scope ends at in hour', example: 13 } } }, can_delete: { type: boolean, description: 'flag that determine seller can delete package or not' }, show_print_label_package: { type: boolean, description: 'flag that indicate seller can print label package or not' }, show_print_label_serials: { type: boolean, description: 'flag that indicate seller can print label serial or not' }, show_print_receive_receipt: { type: boolean, description: 'flag that indicate seller can print receive receipt or not' } } } }, meta_data: { type: object, description: 'meta data', properties: { filters: { type: object, description: 'data for filters', properties: { package_delivery_types: { type: array, items: { type: object, description: 'delivery type in for translation object', properties: { key: { type: string, description: 'delivery type in en' }, title: { type: string, description: 'delivery type in persian' } } } }, package_types: { type: array, description: 'all package types with their translations', items: { type: object, properties: { key: { type: string, description: 'package type in en' }, title: { type: string, description: 'package type in fa' } } } }, package_statuses: { type: array, description: 'all package statuses with their translations', items: { type: object, properties: { key: { type: string, description: 'package status in en' }, title: { type: string, description: 'package status in fa' } } } } } }, is_shipment_allowed: { type: boolean, description: 'flag that show that seller can create shipment or not' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false }, post: { tags: ['Package (11)'], summary: 'Scopes => package', description: null, parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { debug_mode: { type: boolean }, packages: { type: array }, package_type: { type: array }, order_commitment_type: { type: array } }, required: [packages, package_type] }, example: {  } } } }, responses: { 200: { description: SellerCreatePackageForm }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { package_creation: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/packages/warehouses: { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'For getting warehouses based on delivery type', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: delivery_type, description: 'delivery type that is chosen by seller', required: false, example: null, schema: { type: 'string,enum', enum: [seller, digikala, mobile_hub, post, compensation] } }, { in: query, name: shipping_nature_id, description: 'shipping nature of package', required: false, example: null, schema: { type: 'integer,enum', enum: [1, 2] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: PackageWarehousesListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, description: 'id  of warehouse', example: 1234 }, title: { type: string, description: 'title of warehouse', example: 'انبار سیار شماره ۱' }, address: { type: string, description: 'type of warehouse', example: 'تهران، بزرگراه ارتش' }, postal_code: { type: string, description: 'postal code of warehouse', example: '1378123123' }, latitude: { type: string, description: 'latitude of warehouse', example: '35.79412' }, longitude: { type: string, description: 'longitude of warehouse', example: '51.52123' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/packages/warehouses/{warehouse_id}/capacities': { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'This API used for getting capacity of warehouse', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: warehouse_id, description: null, required: true, example: null, schema: { type: null } }, { in: query, name: delivery_type, description: 'delivery type of package', required: true, example: null, schema: { type: 'string,enum', enum: [digikala, mobile_hub, seller] } }, { in: query, name: date, description: 'date for delivered package in format Y-m-d\TH:i:s.uP', required: true, example: null, schema: { type: 'string,date' } }, { in: query, name: package_type, description: 'package type either order fulfilment or consignment', required: true, example: null, schema: { type: 'string,enum', enum: [order_fulfilment, consignment] } }, { in: query, name: shipping_nature_id, description: 'shipping_nature_id of package', required: false, example: null, schema: { type: integer } }, { in: query, name: variants, description: 'comma seperated variant ids of package', required: true, example: null, schema: { type: string } }, { in: query, name: counts, description: 'comma seperated count of variant id in order with variants query param', required: true, example: null, schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: PackageWarehouseCapacitiesObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { capacities: { type: array, description: 'capacity data of a warehouse', items: { type: object, properties: { capacity_id: { type: integer, description: 'id of capacity either id of mobile_hub or id of marketplace_fulfillment_inbound_capacities', example: 1234 }, starts_at: { type: integer, description: 'hour of start(for mobile_hub and seller delivery type)', example: 10 }, ends_at: { type: integer, description: 'hour of end(for mobile_hub and seller delivery type)', example: 12 }, date: { type: string, description: 'date for delivering package(just for post delivery type)', format: 'Y-m-d\TH:i:s.uP', example: '2023-12-26T15:35:25.000000+03:30' }, remained_size_chunk: { type: integer, description: 'remained size of chunk', example: 123 }, disabled: { type: boolean, description: 'is chunk disabled or not', example: false } } } }, price: { type: string, description: 'price of delivery only for mobile hu delivery type(it''s float)', example: '1230.00' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/packages/{package_id}': { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'By this route, you will get a package object view.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: package_id, description: null, required: true, example: null, schema: { type: null } }, { in: query, name: 'search[multi_search]', description: 'for search on product variant id, supplier code and product id', required: false, example: null, schema: { type: string } }, { in: query, name: 'search[status]', description: 'comma seperated status for filter package item status', required: false, example: null, schema: { type: 'string,enum', enum: [new, received, partially_received, rejected, deleted] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: PackageDetailListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { package_products: { type: array, items: { type: object, description: 'product of package', properties: { package_item_id: { type: integer, description: 'id of package item (booooom)', example: 1234 }, title: { type: string, description: 'title of variant', example: 'کتاب نازک | رنگ سبز' }, dkp: { type: integer, description: 'id of product', example: 1234 }, product_link: { type: string, description: 'link to product on digikala site', example: 'https://digikala.com/product/dkp-1234' }, dkpc: { type: integer, 'description ': 'id of product variant', example: 1234 }, delivered_count: { type: integer, description: 'real count of package item', example: 1234 }, ordered_count: { type: integer, description: 'expected count of package', example: 1234 }, supplier_code: { type: string, description: 'supplier_code of variant', example: s01 }, serials: { type: array, items: { type: object, description: 'serials of package item', properties: { id: { type: integer, description: 'package item serial id', example: 1234 }, serial: { type: string, description: 'serial of package item', example: 6E776CD4 }, expiration_date: { type: string, description: 'expiration date of item serial', format: 'Y-m-d\TH:i:s.uP', example: '2023-12-26T15:35:25.000000+03:30' }, production_date: { type: string, description: 'manufacture date of item serial', format: 'Y-m-d\TH:i:s.uP', example: '2023-12-26T15:35:25.000000+03:30' }, status: { type: object, description: 'status of package. keys are en status and values are fa status', properties: { 'status en': { type: string, description: 'status in en map to status fa', example: 'حذف شده' } } }, show_print_label_package: { type: boolean, description: 'flag that indicate can print label package or not' } } } }, image: { type: string, description: 'link to product image', example: 'https://dkstatics-public.digikala.com/digikala-products/12345.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60"' }, status: { type: object, description: 'status of package. keys are en status and values are fa status', properties: { 'status en': { type: string, description: 'status of package in persian', example: 'حذف شده' } } } } } } } } }, meta_data: { type: object, description: 'meta data', properties: { package_id: { type: integer, description: 'id of package', example: 1234 }, package_number: { type: string, description: 'number of package', example: '12355131123123123' }, package_delivery_type: { type: object, description: 'delivery type of package', properties: { key: { type: string, description: 'package delivery type in en', example: digikala }, title: { type: string, description: 'package delivery type in fa', example: 'توسط دیجی‌کالا' } } }, seller_created: { type: boolean, description: 'flag that determine seller created this package or it is created in fc' }, package_status: { type: object, description: 'status of package', properties: { status: { type: string, description: 'status of package', example: 'حذف شده' } } }, package_received: { type: object, properties: { date: { type: string, description: 'received date of package', format: 'Y-m-d\TH:i:s.uP', example: '2023-12-26T15:35:25.000000+03:30' }, warehouse: { type: object, properties: { id: { type: integer, description: 'id of warehouse (na baba!), warehouse id in case seller, post, compensation, seller address id in case digikala, mobile hub id in case mobile_hub', example: 1234 }, title: { type: string, description: 'title of warehouse (na baba!), warehouse title in case seller, post, compensation, seller address title in case digikala, hub address title in case mobile_hub', example: 'انبار شماره ۲' } } }, time_scope: { type: object, properties: { start: { type: integer, description: 'start hour of time scope', example: 10 }, end: { type: integer, description: 'end hour of time scope', example: 12 } } } } }, shipping_nature: { type: object, description: 'shipping nature of package', properties: { shipping_nature_id: { type: string, description: 'id of shipping nature', example: کوچک } } }, status_count: { type: object, description: 'count of each status of package item', properties: { status: { type: object, properties: { count: { type: integer, description: 'count of status in package', example: 12 }, title: { type: string, description: 'title status in fa', example: 'حذف شده' } } } } }, show_export_receipt: { type: boolean, description: 'flag for indication that export receipt should shown or not' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false }, delete: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'By this route, you can delete package', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: package_id, description: null, required: true, example: null, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DeletePackageForm }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { packageId: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/packages/{package_id}/excel/export': { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: null, parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: package_id, description: null, required: true, example: null, schema: { type: null } }, { in: query, name: 'search[multi_search]', description: 'field for search on product id, variant id, supplier code', required: false, example: null, schema: { type: string } }, { in: query, name: 'search[status]', description: 'comma seperated status for filter package item status', required: false, example: null, schema: { type: 'string,enum', enum: [new, received, partially_received, rejected, deleted] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: PackageDetailExcelExportView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { file_link: { type: string, description: 'link to exported excel file in cdn' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { packageId: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/packages/consignment/variants: { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: null, parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 50 } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { type: string, default: id, enum: [id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: asc } }, { in: query, name: variant_ids, description: 'comma seperated variant ids that seller want create package for them', required: false, example: null, schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerCreateConsignmentPackageListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { shipping_nature_id: { type: object, properties: { shipping_nature: { type: object, properties: { key: { type: string, description: 'shipping nature en', example: small }, title: { type: string, description: 'shipping nature fa', example: کوچک } } }, shipping_nature_id: { type: integer, description: 'id of shipping nature(na baba!)', example: 1, enum: [1, 2, 3, 4] }, variants: { type: array, description: 'variant with determined shipping nature id', items: { type: object, properties: { product_variant_id: { type: integer, description: 'only god knows', example: 1234 }, product_variant_title: { type: string, description: 'title of product variant', example: 'کتاب سبز | سبز' }, product_image_url: { type: string, description: 'link to product image', example: 'https://dkstatics-public.digikala.com/digikala-products/1234.jpg' }, product_id: { type: string, description: 'id of product', example: 1234 }, shipping_nature: { type: object, description: 'shipping nature of variant', properties: { key: { type: string, description: 'shipping nature of variant in en', example: small }, title: { type: string, description: 'shipping nature of variant in fa', example: کوچک } } }, supplier_code: { type: string, description: 'supplier code of variant', example: sc123 }, on_the_way_stock: { type: integer, description: 'on the way stock of variant(which seller making package for them and not received them yet)', example: 12 }, dk_inventory: { type: integer, description: 'warehouse_stock of variant', example: 12 }, allowed_consignment_count: { type: integer, description: 'maximum count that seller can create consignment for variant', example: 12 } } } } } } } } }, meta_data: { type: object, description: 'meta data', properties: { package_infos: { type: object, properties: { shipment_abilities: { type: object, properties: { key: { type: string, description: 'delivery type en' }, title: { type: string, description: 'translated delivery type' } } } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/packages/order-fulfilment/variants: { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'view of order items group by variant for creating package', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 50 } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { type: string, default: commitment_date, enum: [commitment_date] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: asc } }, { in: query, name: '[order_item_ids]', description: 'comma seperated order item ids that seller want create package for them', required: false, example: null, schema: { type: string } }, { in: query, name: '[order_commitment_type]', description: 'either commitment type for today(1) or tomorrow(2) or all(3)', required: false, example: null, schema: { type: integer } }, { in: query, name: 'search[commitment_to]', description: 'commitment_to date in iso format', required: false, example: null, schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerCreateOrderFulfilmentPackageListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { shipping_nature_id: { type: object, properties: { shipping_nature: { type: object, properties: { key: { type: string, description: 'shipping nature en', example: small }, title: { type: string, description: 'shipping nature fa', example: کوچک } } }, shipping_nature_id: { type: integer, description: 'id of shipping nature(na baba!)', example: 1, enum: [1, 2, 3, 4] }, variants: { type: array, description: 'variant with determined shipping nature id', items: { type: object, properties: { variant_id: { type: integer, description: 'I asked this from jesus, he answered it with doubt: {id of variant}', example: 1234 }, product_variant_title: { type: string, description: 'title of product variant', example: 'کتاب سبز | سبز' }, product_id: { type: integer, description: 'title of product', example: 'کتاب سبز' }, product_image_url: { type: string, description: 'link to product image', example: 'https://dkstatics-public.digikala.com/digikala-products/1234.jpg' }, product_url_on_dk_site: { type: string, description: 'link to product on site', example: 'https://demo.digikala.com/product/dkp-12345' }, supplier_code: { type: string, description: 'supplier code pf variant', example: sda011 }, shipping_nature_id: { type: integer, description: 'id of shipping nature of variant', example: 1, enum: [1, 2, 3, 4] }, shipping_nature: { type: object, properties: { title: { type: string, description: 'shipping nature type en', example: small }, key: { type: string, description: 'shipping nature type fa', example: 'کوچک ' } } }, quantity: { type: integer, description: 'quantity of order item', example: 123 }, available_stock: { type: object, properties: { on_the_way_stock: { type: integer, description: 'on the way stocks of variant', example: 124 }, warehouse_stock: { type: integer, description: 'sum of warehouse_stock  and warehouse_supply_stock of variant', example: 123 } } }, sent_optimal: { type: integer, description: 'count of optimal sent for variant seller should sent that we have available stocks for all of its order items', example: true }, has_IMEI: { type: boolean, description: 'if category of product of variant is IMEI inventory is true otherwise false', example: true }, has_expiry_date: { type: boolean, description: 'if category of product of variant has expiry date or product nature of product of variant is fresh otherwise false', example: true } } } } } } } } }, meta_data: { type: object, description: 'meta data', properties: { package_infos: { type: object, properties: { shipment_abilities: { type: object, properties: { key: { type: string, description: 'delivery type en' }, title: { type: string, description: 'translated delivery type' } } } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false }, post: { tags: ['Package (11)'], summary: 'Scopes => package', description: 'view of order items group by variant for creating package (method is POST because long url issue)', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { order_item_ids: { type: array, items: { type: integer, description: 'order item id', example: 1234 }, required: false, description: 'list of order item ids that you want to create package for them' } }, required: {  } }, example: { order_item_ids: [1234] } } } }, responses: { 200: { description: SellerCreateOrderFulfilmentPackageListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { shipping_nature_id: { type: object, properties: { shipping_nature: { type: object, properties: { key: { type: string, description: 'shipping nature en', example: small }, title: { type: string, description: 'shipping nature fa', example: کوچک } } }, shipping_nature_id: { type: integer, description: 'id of shipping nature(na baba!)', example: 1, enum: [1, 2, 3, 4] }, variants: { type: array, description: 'variant with determined shipping nature id', items: { type: object, properties: { variant_id: { type: integer, description: 'I asked this from jesus, he answered it with doubt: {id of variant}', example: 1234 }, product_variant_title: { type: string, description: 'title of product variant', example: 'کتاب سبز | سبز' }, product_id: { type: integer, description: 'title of product', example: 'کتاب سبز' }, product_image_url: { type: string, description: 'link to product image', example: 'https://dkstatics-public.digikala.com/digikala-products/1234.jpg' }, product_url_on_dk_site: { type: string, description: 'link to product on site', example: 'https://demo.digikala.com/product/dkp-12345' }, supplier_code: { type: string, description: 'supplier code pf variant', example: sda011 }, shipping_nature_id: { type: integer, description: 'id of shipping nature of variant', example: 1, enum: [1, 2, 3, 4] }, shipping_nature: { type: object, properties: { title: { type: string, description: 'shipping nature type en', example: small }, key: { type: string, description: 'shipping nature type fa', example: 'کوچک ' } } }, quantity: { type: integer, description: 'quantity of order item', example: 123 }, available_stock: { type: object, properties: { on_the_way_stock: { type: integer, description: 'on the way stocks of variant', example: 124 }, warehouse_stock: { type: integer, description: 'sum of warehouse_stock  and warehouse_supply_stock of variant', example: 123 } } }, sent_optimal: { type: integer, description: 'count of optimal sent for variant seller should sent that we have available stocks for all of its order items', example: true }, has_IMEI: { type: boolean, description: 'if category of product of variant is IMEI inventory is true otherwise false', example: true }, has_expiry_date: { type: boolean, description: 'if category of product of variant has expiry date or product nature of product of variant is fresh otherwise false', example: true } } } } } } } } }, meta_data: { type: object, description: 'meta data', properties: { package_infos: { type: object, properties: { shipment_abilities: { type: object, properties: { key: { type: string, description: 'delivery type en' }, title: { type: string, description: 'translated delivery type' } } } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/variants/packages/consignment: { get: { tags: ['Package (11)'], summary: 'Scopes => package', description: null, parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 10 } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { type: string, default: _id, enum: [_id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: desc } }, { in: query, name: 'search[multi_search]', description: 'field for multi search on product_id or product_variant_id or supplier_code of variant', required: false, example: null, schema: { type: string } }, { in: query, name: 'search[shipping_nature_id]', description: 'shipping nature of variant', required: false, example: null, schema: { type: 'integer,enum', enum: [1, 3, 2] } }, { in: query, name: 'search[selected_variant_ids]', description: 'comma seperated variant ids that are selected', required: false, example: null, schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ConsignmentListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: _id }, sort_order: { type: string, description: 'acs or desc', example: desc }, sort_columns: { type: array, description: 'name of sort columns', example: [_id] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { product_variant_id: { type: integer, description: 'no body knows', example: 1234 }, product_variant_title: { type: string, description: 'title of variant', example: 'کتاب سبز | سبز' }, product_id: { type: integer, description: 'id of product', example: 1234 }, link_to_product: { type: string, description: 'link to product on digikla site', example: 'https://demo.digikala.com/product/dkp-12345' }, product_image_url: { type: string, description: 'product image url on object storage', example: 'https://dkstatics-public.digikala.com/digikala-products/1234.jpg' }, shipping_nature: { type: object, properties: { key: { type: string, description: 'shipping nature of variant in en', example: small }, title: { type: string, description: 'shipping nature of variant int fa', example: کوچک } } }, supplier_code: { type: string, description: 'supplier code of variant', example: scs91 }, on_the_way_stock: { type: integer, description: 'on the way stock of variant(making package for them)', example: 12 }, dk_inventory: { type: integer, description: 'warehouse stock + marketplace seller stock of variant', example: 12 }, allowed_count_consignment: { type: integer, description: 'allowed count for variant to creating consignment for it', example: 12 } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/shipments/dk: { get: { tags: ['Shipments (5)'], summary: 'Scopes => shipment', description: 'Get dk pickup seller''s shipments', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: 'search[created_at_end]', description: 'The end time of shipments creation', required: false, example: null, schema: { type: 'Y-m-d\TH:i:s.uP' } }, { in: query, name: 'search[shipment_receive_at_start]', description: 'The start time of shipments receive', required: false, example: null, schema: { type: 'Y-m-d\TH:i:s.uP' } }, { in: query, name: 'search[shipment_receive_at_end]', description: 'The end time of shipments receive', required: false, example: null, schema: { type: 'Y-m-d\TH:i:s.uP' } }, { in: query, name: 'search[shipment_status]', description: 'The shipment status. null means you want all status', required: false, example: null, schema: { type: 'string,enum', enum: [new, received, partially_received, rejected, error] } }, { in: query, name: 'search[multi_search]', description: 'field for search on shipment number, serial, variant_id and supplier code', required: false, example: null, schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DKPickupShipmentsListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: shipment_id }, sort_order: { type: string, description: 'acs or desc', example: desc }, sort_columns: { type: array, description: 'name of sort columns', example: [shipment_id] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, description: 'id of shipment', example: 123 }, shipment_number: { type: string, description: 'shipment number string', example: '91055220824001' }, created_at: { type: string, description: 'time of creation', format: 'Y-m-d\TH:i:s.uP', example: '2023-12-26T15:35:25.000000+03:30' }, pickup_warehouse_title: { type: string, description: 'warehouse title', example: 'انبار شماره ۲' }, pickup_date: { type: string, description: 'pick up date of shipment', format: 'Y-m-d\TH:i:sO', example: '2023-12-26T15:35:25.000000+03:30' }, cost: { type: integer, description: 'shipment const', example: 200000 }, status: { type: string, description: 'status of shipment', example: new, enum: [new, received, partially_received, rejected, error, deleted] }, total_volume: { type: integer, description: 'total volume of shipment', format: cm3, example: 12 }, total_weight: { type: integer, description: 'total weight of shipment', format: gram, example: 12 }, min_distance: { type: integer, description: 'min distance to warehouse for packages of shipment', format: km, example: 12 }, can_delete: { type: boolean, description: 'flag that indicates can we delete shipment or not', example: true } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false }, post: { tags: ['Shipments (5)'], summary: 'Scopes => shipment', description: 'create shipments.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: false, content: { application/json: { schema: { type: object, properties: { package_ids: { type: array, items: { type: integer, description: 'package id', example: 1234 }, required: false, description: 'package ids for creating shipment' }, warehouse_id: { type: integer, example: 1234, description: 'warehouse id that shipment needs to be shipped ' }, pickup_date: { type: string, example: '2024-08-23T20:29:59.999Z', description: 'date of shipment pickup' }, time_scope: { type: string, example: 10-12, description: 'hour range of shipment pickup' } }, required: {  } }, example: { package_ids: [1234], warehouse_id: 1234, pickup_date: '2024-08-23T20:29:59.999Z', time_scope: 10-12 } } } }, responses: { 200: { description: CreateDKPickupShipmentForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { message: { type: string, example: 'Shipment created successfully', description: 'success message' }, shipment_entity: { type: object, description: '', properties: { number: { type: string, example: '123552201241234', description: 'created shipment id' }, warehouse: { type: string, example: کاپا, description: 'warehouse name' }, received_at_forecast_date: { type: string, example: '2024-08-23T23:59:59.999000+03:30', description: 'shipment pick up date' }, time_scope: { type: string, example: 10-12, description: 'shipment pick up hours range' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { shipment_creation: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/shipments/dk/packages: { get: { tags: ['Shipments (5)'], summary: 'Scopes => shipment', description: null, parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 50 } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { type: string, default: id, enum: [id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: asc } }, { in: query, name: package_ids, description: 'comma seperated package ids', required: false, example: null, schema: { type: string } }, { in: query, name: 'search[warehouse_id]', description: warehouse_id, required: false, example: null, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DKShipmentCreationPackagesListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, description: 'id of package', example: 1234 }, package_number: { type: string, description: 'number of package', example: '123405512612123456' }, shipment_type: { type: object, properties: { key: { type: string, description: 'type of package(en)', example: order_fulfilment }, title: { type: string, description: 'type of package(fa)', example: سفارش } } }, shipping_nature: { type: object, properties: { key: { type: string, description: 'shipping nature of package(en)', example: small }, title: { type: string, description: 'shipping nature of package(fa)', example: کوچک } } }, created_at: { type: string, description: 'created at of package in iso format', example: '2023-12-26T15:35:25.000000+03:30' }, shipment_cost: { type: integer, description: 'cost of shipment in RIAL', example: 123000 } } } }, meta_data: { type: object, description: 'meta data', properties: { warehouse: { type: object, properties: { time_scopes: { type: array, example: [8-10, 10-12, 12-14, 14-16], description: 'time scope ({start_at}_{end_at}' } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/shipments/dk/{shipment_id}': { get: { tags: ['Shipments (5)'], summary: 'Scopes => shipment', description: 'Get dk pickup seller''s shipments detail', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: shipment_id, description: null, required: true, example: null, schema: { type: null } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DKPickupShipmentObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { id: { type: integer, description: 'id of shipment', example: 123 }, shipment_number: { type: string, description: 'shipment number string', example: '91055220824001' }, created_at: { type: string, description: 'time of creation', format: 'Y-m-d\TH:i:s.uP', example: '2023-12-26T15:35:25.000000+03:30' }, pickup_warehouse_title: { type: string, description: 'warehouse title', example: 'انبار شماره ۲' }, pickup_date: { type: string, description: 'pick up date of shipment', format: 'Y-m-d\TH:i:sO', example: '2023-12-26T15:35:25.000000+03:30' }, cost: { type: integer, description: 'shipment const', example: 200000 }, status: { type: string, description: 'status of shipment', example: new, enum: [new, received, partially_received, rejected, error, deleted] }, total_volume: { type: integer, description: 'total volume of shipment', format: cm3, example: 12 }, total_weight: { type: integer, description: 'total weight of shipment', format: gram, example: 12 }, min_distance: { type: integer, description: 'min distance to warehouse for packages of shipment', format: km, example: 12 }, can_delete: { type: boolean, description: 'flag that indicates can we delete shipment or not', example: true }, packages: { type: object, description: 'packages of shipment. key is package_id and value is package data', properties: { package_id: { type: object, description: 'id of package', properties: { id: { type: integer, description: 'id of package', example: 123 }, package_number: { type: string, description: 'number of package', example: '910551261123567' }, type: { type: object, properties: { key: { type: string, description: 'type of package in en', example: order_fulfilment }, title: { type: string, description: 'type of package in fa', example: سفارش } } }, shipping_nature: { type: object, properties: { shipping_nature_id: { type: string, description: 'mapping of shipping nature to it''s translation', example: کوچک } } }, create_date: { type: string, description: 'created at of package', format: 'Y-m-d\TH:i:s.uP', example: '2023-12-26T15:35:25.000000+03:30' }, estimated_pickup_date: { type: string, description: 'received forecast of package', format: 'Y-m-d\TH:i:s.uP', example: '2023-12-26T15:35:25.000000+03:30' }, status: { type: object, properties: { key: { type: string, description: 'status of package in en', example: new }, title: { type: string, description: 'status pf package in fa', example: 'اماده ارسال/تحویل' } } } } } } }, packages_count: { type: integer, description: 'count of packages in shipment', example: 12 }, time_scope: { type: object, description: 'time scope of package received at forecast', properties: { start: { type: integer, description: 'start hour of time scope', example: 10 }, end: { type: integer, description: 'end hour of time scope', example: 12 } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { shipmentId: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false }, delete: { tags: ['Shipments (5)'], summary: 'Scopes => shipment', description: 'delete shipments.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: shipment_id, description: null, required: true, example: null, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: DeleteDKPickupShipmentForm }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { shipmentId: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/profile: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get seller''s profile data in bulk or mini format.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { seller_id: { type: integer, example: 12345, description: 'Seller Identifier' }, wallet_credit: { type: integer, example: 19990, description: 'credit amount in seller wallet' }, seller_name: { type: string, example: 'فروشگاه علی', description: 'seller title in persian' }, seller_rating: { type: double, example: 2.5, description: 'seller rate defined by his performance. (between 1 to 5)' }, is_private: { type: boolean, example: true, description: 'seller''s can have 2 type, private(real person) or business(legal person)' }, new_notifications: { type: integer, example: 172, description: 'count of notifications that are not read by seller' }, new_questions: { type: integer, example: 640, description: 'count of customer questions assigned to seller without seller answer' }, verification: { type: object, description: 'data that show seller verification steps', properties: { hoda_modal: { type: string, example: hoda_none, description: 'check seller general information', enum: [hoda_passed, hoda_not_passed, hoda_none] }, is_under_18: { type: boolean, example: false, description: 'validate if seller is under 18 years old or not' }, emta_modal: { type: string, example: emta_none, description: 'validate seller data by EMTA system', enum: [emta_passed, emta_not_passed, emta_none] } } }, registration_status: { type: string, example: approved, description: 'seller registration status', enum: [email_not_confirmed, private_business_not_confirmed, contact_data_not_confirmed, phone_not_confirmed, documents_not_confirmed, contract_not_confirmed, approved, business_details, training, waiting_for_approval, rejected] }, rejection_reasons: { type: array, description: 'reasons that shows why seller got rejected (list of persian reasons)', items: { type: string, example: 'دلیل ۱' } }, rejection_reasons_extra_message: { type: string, example: 'دلیل بیشتر', description: 'extra reason defined to reject reason' }, logo_rejection_reason: { type: string, example: 'یه چیزی هست', description: 'seller logo rejection reason' }, description_rejection_reason: { type: string, example: 'یه دلیل دیگه', description: 'seller introduction rejection reason' }, register_phone: { type: object, description: 'this object is for showing some modal to seller because of his register_phone status', properties: { submitted: { type: boolean, example: true }, seen_warning_at: { type: string, example: '1991-08-29T00:00:00.000000+03:30' }, restricted: { type: boolean, example: false } } }, contract_status: { type: object, description: 'show some state of seller contract (for modal usage)', properties: { signed: { type: boolean, example: true }, expired: { type: boolean, example: false }, restricted: { type: boolean, example: false } } }, has_password_expired: { type: boolean, example: false, description: '(depricated) show if seller need to change his password or not' }, is_shipment_list_visible: { type: boolean, example: true }, first_name: { type: string, example: علی }, last_name: { type: string, example: موسوی }, gender: { type: string, example: male }, email: { type: string, example: salimousavi70@gmail.com }, phone: { type: string, example: 989123456789, description: 'seller mobile phone' }, state: { type: string, example: تهران, description: 'seller province/state' }, city: { type: string, example: تهران }, birthday: { type: string, example: '1991-08-29T00:00:00.000000+03:30' }, company: { type: string, example: 'ایده پردازان دیجیکالا', description: 'seller official company name' }, isNewSeller: { type: boolean, example: false, description: 'show seller is newly joined to DK or not' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/profile/business: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get profile business data.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileBusinessObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { business_type: { type: string, example: private, description: 'type of business which can be private or business' }, first_name: { type: string, example: مريم, description: 'private seller first name' }, last_name: { type: string, example: موسوي, description: 'private seller last name' }, national_id: { type: string, example: '0012345678', description: 'private seller national code' }, register_phone: { type: string, example: '989123456789', description: 'seller register phone' }, mobile_phone: { type: string, example: '989123456789', description: 'register mobile phone (for contacting the seller)' }, email: { type: string, example: test@gmail.com, description: 'seller email' }, verification_status: { type: object, description: 'status of each field present', properties: { national_id: { type: boolean, example: true, description: 'if the national code is approved (private)' }, mobile_phone: { type: boolean, example: true, description: 'if the mobile phone is approved' }, register_phone: { type: boolean, example: true, description: 'if the register phone is approved' }, email: { type: boolean, example: true, description: 'if the email is approved' }, company_name: { type: boolean, example: true, description: 'if the company name is approved (business)' }, company_type: { type: boolean, example: true, description: 'if the company type is approved (business)' }, company_registration_number: { type: boolean, example: true, description: 'if the company registration number is approved (business)' }, company_national_id_number: { type: boolean, example: true, description: 'if the company national code is approved (business)' }, company_economic_number: { type: boolean, example: true, description: 'if the company economic number is approved (business)' }, company_authorized_representative: { type: boolean, example: true, description: 'if the company authorized representative is approved (business)' } } }, company_name: { type: string, example: 'شرکت میهن', description: 'company name (business)' }, company_type: { type: object, description: 'company type (business) which can be public,join_stock,ltd, coop, solidarity, institution, and other', properties: { key: { type: string, example: public, description: '' }, title: { type: string, example: 'سهامی عام', description: '' } } }, company_registration_number: { type: string, example: '123456', description: 'company registration number (business)' }, company_national_id_number: { type: string, example: '140012345567', description: 'company national code (business)' }, company_economic_number: { type: string, example: '140012345567', description: 'company economic number (business)' }, company_authorized_representative: { type: string, example: 'علی موسوی', description: 'company authorized representative (business)' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false }, patch: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Edit seller business data.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { type: { type: string, example: real, description: 'Seller legally type' }, first_name: { type: string, example: علی, description: 'first name of seller' }, last_name: { type: string, example: موسوی, description: 'last name of seller' }, national_id: { type: string, example: '0012345678', description: 'seller national_identity_number (only can edit if it\''s NOT verified yet)' }, company_name: { type: string, example: 'علی کمپانی', description: 'seller official company name (only can edit if it\''s NOT verified yet)' }, company_type: { type: string, example: ltd, description: 'seller official company type (only can edit if it\''s NOT verified yet)' }, company_registration_number: { type: string, example: '123214552', description: 'seller official company registration number (only can edit if it\''s NOT verified yet)' }, company_national_id_number: { type: string, example: '1232144123', description: 'seller official company national identity number (only can edit if it\''s NOT verified yet)' }, company_economic_number: { type: string, example: '12312412412', description: 'seller official company economic number (only can edit if it\''s NOT verified yet)' }, company_authorized_representative: { type: string, example: 'علی موسوی', description: 'seller official company authorized representative people (only for Business type seller)' } }, required: [type] }, example: { type: real, first_name: علی, last_name: موسوی, national_id: '0012345678', company_name: 'علی کمپانی', company_type: ltd, company_registration_number: '123214552', company_national_id_number: '1232144123', company_economic_number: '12312412412', company_authorized_representative: 'علی موسوی' } } } }, responses: { 200: { description: UpdateBusinessDataForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { message: { type: string, example: success } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { type: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/profile/store: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get seller store data', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileStoreObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { seller_type: { type: string, example: private, description: 'seller legally type', enum: [private, business] }, seller_code: { type: integer, example: 12345, description: 'Seller id' }, business_name: { type: string, example: 'فروشگاه علی', description: 'seller store name' }, description: { type: object, properties: { description: { type: string, example: 'فروشگاه خوبیه', description: 'description body' }, status: { type: string, example: new, description: 'description text status', enum: [new, approved, rejected] }, rejection_reason: { type: string, example: 'خوب توضیح ندادی', description: 'if seller store description rejected, the reason will be shown here' } } }, holidays: { type: array, description: 'show the selected holidays of seller that seller will not work', items: { type: object, properties: { id: { type: integer, example: 12345 }, date: { type: object, properties: { date: { type: string, example: '2024-08-20 00:00:00.000000' }, timezone_type: { type: integer, example: 3 }, timezone: { type: string, example: Asia/Tehran } } }, active: { type: boolean, example: true, description: 'is this holiday still active or not' }, live: { type: boolean, example: false, description: 'is holiday today or not?' } } } }, workdays: { type: array, description: 'show seller working days in official Holidays', items: { type: object, properties: { id: { type: integer, example: 12345 }, date: { type: object, properties: { date: { type: string, example: '2024-08-16 00:00:00.000000' }, timezone_type: { type: integer, example: 3 }, timezone: { type: string, example: Asia/Tehran } } }, type: { type: string, example: ship_by_seller, description: 'seller can choose which type of sales is active', enum: [ship_by_seller, ship_by_digikala, both] }, active: { type: boolean, example: true, description: 'is working day still active or not' }, is_not_passed: { type: boolean, example: true, description: 'is working day passed or not' }, applied: { type: boolean, example: false } } } }, phone: { type: string, example: 021-8888888, description: 'Local phone' }, website: { type: string, example: 'https://alistore.com', description: 'seller non-digikala website URL' }, logo: { type: object, properties: { file: { type: string, example: 'https://dkstatic-public-demo.digikala.com/digikala-marketplace-seller-logo/89b8d22868f8e247ed19ad15723bdb2b2070dc19_1723277982.jpg' }, status: { type: string, example: new, enum: [new, approved, rejected] }, rejection_reason: { type: string, example: 'خوب نیست' } } }, registration_status: { type: object, properties: { is_logo_approved: { type: boolean, example: false }, is_description_approved: { type: boolean, example: false }, is_phone_valid: { type: boolean, example: true }, is_business_name_valid: { type: boolean, example: true } } }, business_name_validation_status: { type: object, properties: { key: { type: string, example: approved, enum: [pending, approved, rejected] }, title: { type: string, example: 'تایید شده' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/profile/address: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get seller addresses data.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileAddressListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, example: 12345 }, city: { type: object, properties: { id: { type: integer, example: 123 }, name: { type: string, example: تهران }, latitude: { type: double, example: 35.75 }, longitude: { type: double, example: 51.375 } } }, state: { type: object, properties: { id: { type: integer, example: 12 }, name: { type: string, example: تهران }, latitude: { type: double, example: 35.6943 }, longitude: { type: double, example: 51.42151 } } }, title: { type: string, example: 'انبار ۱' }, address: { type: string, example: 'خیابان انقلاب خیابان ولیعصر، پارک ساعی' }, house_number: { type: string, example: ' ۱۱۰ زنگ ۱ و ۲', description: 'it means پلاک' }, latitude: { type: double, example: 35.7 }, longitude: { type: double, example: 51.397 }, postal_code: { type: string, example: 1314754433 } } } }, meta_data: { type: object, description: 'meta data', properties: { can_delete_address: { type: boolean, description: 'falg that indicate seller can delete address or not(seller shoul has at least one address)', example: true } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/profile/warehouse: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get seller''s profile warehouse address data.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileWarehouseAddressListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, example: 12345 }, title: { type: string, example: 'انبار تست' }, latitude: { type: double, example: 35.7332 }, longitude: { type: double, example: 51.3906 }, description: { type: string, example: 'جهت تست ساخته شده است' }, postal_code: { type: string, example: 1234567890 }, address: { type: string, example: 'تهران، بزرگراه کردستان، فرشی مقدم' }, house_number: { type: string, example: 123 }, city: { type: object, properties: { id: { type: integer, example: 123 }, name: { type: string, example: تهران }, latitude: { type: double, example: 35.75 }, longitude: { type: double, example: 51.375 } } }, state: { type: object, properties: { id: { type: integer, example: 123 }, name: { type: string, example: تهران }, latitude: { type: double, example: 35.69439 }, longitude: { type: double, example: 51.42151 } } }, phone: { type: string, example: '02188888888' }, is_return_address: { type: boolean, example: false, description: 'Seller Warehouse that can receive returned products' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/profile/document: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get seller documents data.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileDocumentObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { business_type: { type: string, example: private, description: 'business legally type (private, business)' }, types: { type: array, items: { type: object, description: 'list of document types', properties: { id: { type: integer, example: 123 }, text: { type: string, example: 'آگهی آخرین تغییرات روزنامه رسمی', description: 'document title' }, has_expired_date: { type: boolean, example: false, description: 'does document has expiration date or not' } } } }, files: { type: array, description: 'list of seller uploaded documents', items: { type: object, properties: { id: { type: integer, example: 12345 }, document_title: { type: string, example: 'کارت ملی' }, image_src: { type: string, example: 'https://dkstatic-public-demo.digikala.com/digikala-marketplace-sellers-documents/65709de1064cc2b104c82282af999e2d5_17237946.jpg', description: 'seller uploaded file/image' }, status: { type: object, description: 'seller document status', properties: { key: { type: string, example: new, description: 'status key', enum: [new, approved, rejected] }, title: { type: string, example: 'در حال بررسی', description: 'status in persian' } } }, rejection_reason: { type: string, example: 'مدارک شما به علت کیفیت پایین مدارک ارسالی مورد تایید مرکز فروشندگان دیجی کالا قرار نگرفت', description: 'document rejection reason' }, expires_at_persian: { type: string, example: 1402/09/15, description: 'document persian(solar) expiry date' }, document_id: { type: integer, example: 123 }, unlimited: { type: boolean, example: false, description: 'is document has no expiry time or not' } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/profile/training: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get seller training data.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfileTrainingObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { status: { type: string, example: finished, enum: [new, subscribed, finished, not_participated] }, date: { type: object, properties: { date: { type: string, example: '2024-08-16 00:00:00.000000' }, timezone_type: { type: integer, example: 3 }, timezone: { type: string, example: Asia/Tehran } } }, type: { type: string, example: webinar, description: 'type of seller training session', enum: [webinar, seminar] }, has_finished_survey: { type: boolean, example: true, description: 'done with the survey we send after seller finish training' }, has_one_more_person: { type: boolean, example: false, description: 'is seller participate in training with on extra person or not' }, has_sales_experience: { type: boolean, example: false, description: 'has sales experience or not' }, class_link: { type: string, example: 'https://classlink.ir', description: 'link of webinar session' }, tutorial_videos: { type: array, description: 'some tutorial videos suitable for seller', items: { type: object, properties: { title: { type: string, example: 'همه چیز در مورد درج کالا', description: 'video name' }, link: { type: string, example: 'https://www.aparat.com/v/46dD?playlist=16148', description: 'video link' }, duration: { type: string, example: '25:27', description: 'video duration' } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/profile/performance: { get: { tags: ['Profile (9)'], summary: 'Scopes => profile', description: 'Get seller performance data.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: ProfilePerformanceObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { five_start_rate: { type: double, example: 2.5, description: 'Its show seller rate in range of (1 to 5)' }, customer_statisfaction: { type: object, description: 'rate of customer satisfaction of seller products', properties: { rate: { type: integer, example: 89 }, rate_count: { type: integer, example: 165447 } } }, summary: { type: object, properties: { delivered_on_time_percentage: { type: double, example: 94.72, description: 'rate of on-time delivery of seller (no delay)' }, not_canceled_percentage: { type: double, example: 90.64, description: 'rate of no order cancellation of seller' }, not_returned_percentage: { type: double, example: 99.87, description: 'rate of no order return from customer for seller products' } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/questions: { get: { tags: ['Questions & Answers (3)'], summary: 'Scopes => question', description: 'Get a list of customer''s questions from seller.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 50 } }, { in: query, name: sort, description: 'Define list sort column.', required: false, example: null, schema: { type: string, default: id, enum: [id, answers_count] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: desc } }, { in: query, name: 'search[answer-status]', description: '(comma-seperated) statuses of seller answer. items: unanswered, pending, rejected, verified', required: false, example: 'unanswered, pending', schema: { type: string } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: QuestionAndAnswerListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: desc }, sort_columns: { type: array, description: 'name of sort columns', example: [id, answers_count] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, example: 12345, description: 'question id' }, body: { type: string, example: 'رنگ‌رنگ قهوه ایشو دارین‌؟', description: 'customer question' }, date: { type: string, example: '2023-12-21', description: 'question creation time' }, answer: { type: object, description: 'if there is an answer that seller submitted before, it will be shown here', properties: { id: { type: integer, example: 12345, description: 'Answer id' }, body: { type: string, example: 'سلام. بله کاملا قابل سایز می باشد. انتهای دستبند به صورت آسانسوری سایز می شود.', description: 'Answer body' }, files: { type: array, items: { type: string, example: '', description: 'Answer attachment' } }, status: { type: object, properties: { title: { type: string, example: 'تایید شده', description: 'answer status in Persian' }, key: { type: string, example: confirmed, description: 'answer status key', enum: [confirmed, unknown, rejected, pending] } } }, date: { type: string, example: '2023-10-08', description: 'Answer submitted date' } } }, answer_count: { type: integer, example: 1, description: 'number of assigned answers' }, product: { type: object, description: 'product that customer asked question about', properties: { id: { type: integer, example: 109227443, description: 'product id' }, title: { type: string, example: 'دستبند نقره مردانه', description: 'product name' }, link: { type: string, example: 'https://www.digikala.com/product/dkp-10955744/', description: 'product page link in digikala (PDP)' }, photo: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-products/bfeb186e6971e740120ea602948f763c93561f16_1680025602.jpg', description: 'product image' } } }, user: { type: string, example: 'علی موسوی', description: 'full-name of customer who asked question' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/questions/{question_id}': { get: { tags: ['Questions & Answers (3)'], summary: 'Scopes => question', description: 'Get a customer question details that assigned to seller.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: question_id, description: 'Question id', required: true, example: 12345, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: SellerProductQuestionObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { id: { type: integer, example: 12345, description: 'question id' }, body: { type: string, example: 'رنگ‌رنگ قهوه ایشو دارین‌؟', description: 'customer question' }, date: { type: string, example: '2023-12-21', description: 'question creation time' }, answer: { type: object, description: 'if there is an answer that seller submitted before, it will be shown here', properties: { id: { type: integer, example: 12345, description: 'Answer id' }, body: { type: string, example: 'سلام. بله کاملا قابل سایز می باشد. انتهای دستبند به صورت آسانسوری سایز می شود.', description: 'Answer body' }, files: { type: array, items: { type: string, example: '', description: 'Answer attachment' } }, status: { type: object, properties: { title: { type: string, example: 'تایید شده', description: 'answer status in Persian' }, key: { type: string, example: confirmed, description: 'answer status key', enum: [confirmed, unknown, rejected, pending] } } }, date: { type: string, example: '2023-10-08', description: 'Answer submitted date' } } }, answer_count: { type: integer, example: 1, description: 'number of assigned answers' }, product: { type: object, description: 'product that customer asked question about', properties: { id: { type: integer, example: 12345, description: 'product id' }, title: { type: string, example: 'دستبند نقره مردانه', description: 'product name' }, link: { type: string, example: 'https://www.digikala.com/product/dkp-12345/', description: 'product page link in digikala (PDP)' }, photo: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-products/bfeb186e6971e740120ea602948f763c93561f16_1.jpg', description: 'product image' } } }, user: { type: string, example: 'علی موسوی', description: 'full-name of customer who asked question' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { question_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/questions/answer: { post: { tags: ['Questions & Answers (3)'], summary: 'Scopes => question', description: 'Answer to a customer question that is assigned to seller.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { question_id: { type: integer, example: 12345, description: 'Question Id' }, answer: { type: string, example: 'بله رنگ قرمز موجود هست', description: 'Answer body' }, file_ids: { type: array, items: { type: integer, example: 123444 }, required: false, description: 'array of temporary uploaded file ids' } }, required: [question_id, answer] }, example: { question_id: 12345, answer: 'بله رنگ قرمز موجود هست', file_ids: [123444] } } } }, responses: { 200: { description: SellerProductQuestionObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { id: { type: integer, example: 12345, description: 'question id' }, body: { type: string, example: 'رنگ‌رنگ قهوه ایشو دارین‌؟', description: 'customer question' }, date: { type: string, example: '2023-12-21', description: 'question creation time' }, answer: { type: object, description: 'if there is an answer that seller submitted before, it will be shown here', properties: { id: { type: integer, example: 12345, description: 'Answer id' }, body: { type: string, example: 'سلام. بله کاملا قابل سایز می باشد. انتهای دستبند به صورت آسانسوری سایز می شود.', description: 'Answer body' }, files: { type: array, items: { type: string, example: '', description: 'Answer attachment' } }, status: { type: object, properties: { title: { type: string, example: 'تایید شده', description: 'answer status in Persian' }, key: { type: string, example: confirmed, description: 'answer status key', enum: [confirmed, unknown, rejected, pending] } } }, date: { type: string, example: '2023-10-08', description: 'Answer submitted date' } } }, answer_count: { type: integer, example: 1, description: 'number of assigned answers' }, product: { type: object, description: 'product that customer asked question about', properties: { id: { type: integer, example: 12345, description: 'product id' }, title: { type: string, example: 'دستبند نقره مردانه', description: 'product name' }, link: { type: string, example: 'https://www.digikala.com/product/dkp-12345/', description: 'product page link in digikala (PDP)' }, photo: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-products/bfeb186e6971e740120ea602948f763c93561f16_1.jpg', description: 'product image' } } }, user: { type: string, example: 'علی موسوی', description: 'full-name of customer who asked question' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { question_id: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/insight/overview: { get: { tags: ['Insight (5)'], summary: 'Scopes => insight', description: 'Get seller''s insight overview list for each day.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: range, description: '', required: true, example: last_7_days, schema: { type: string, enum: [last_7_days, last_14_days, last_30_days, before_last_14_days] } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: InsightOverviewListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { charts: { type: array, description: 'Some seller insight data that is shown per Date. each item of ''chart'' key, shows data in a Date. you can build a chart with this data ordered in Date', items: { type: object, properties: { date: { type: string, example: '2024-08-13T00:00:00', description: 'Time vertical of chart' }, gross_sales_amount: { type: integer, example: 0, description: 'seller gross sale (IRR)' }, gross_item_sold: { type: integer, example: 0, description: 'seller gross item sold' }, conversion_rate: { type: integer, example: 0, description: 'amount of item sold / visit count' }, visit_count: { type: integer, example: 0, description: 'visit amount of seller products' }, approved_promotion_participation: { type: integer, example: 2, description: 'number of variants that approved to participate in promotions' }, net_item_sold_periodic_promotions: { type: integer, example: 0, description: 'net item sold in periodic pricing promotions پروموشن های زمان دار' }, net_item_sold_incredible_promotions: { type: integer, example: 0, description: 'net item sold in incredible offer promotions پیشنهاد شگفت انگیز' }, net_item_sold_mega_promotions: { type: integer, example: 0, description: 'net item sold in mega campaign promotions مگا کمپین ها' }, net_item_sold_selling_and_sales_promotions: { type: integer, example: 0 }, count_variants: { type: integer, example: 101, description: 'all seller variants (active and inactive)' }, count_live_variants: { type: integer, example: 0, description: 'all seller active and sellable variants (have selling-stock)' }, count_deactive_variants: { type: integer, example: 101, description: 'all seller out of stock variants(active and inactive)' }, count_variants_having_sales: { type: integer, example: 12, description: 'all seller variants that have at least one sale' }, net_item_sold_click_campaigns: { type: integer, example: 123, description: 'net item sold in click campaign promotions تبلیغات کلیکی' } } } }, sum: { type: object, description: 'summation of data items in selected time range', properties: { gross_sales_amount: { type: integer, example: 0, description: 'seller gross sale (IRR)' }, gross_item_sold: { type: integer, example: 0, description: 'seller gross item sold' }, conversion_rate: { type: integer, example: 0, description: 'amount of item sold / visit count' }, visit_count: { type: integer, example: 0, description: 'visit amount of seller products' }, approved_promotion_participation: { type: integer, example: 2, description: 'number of variants that approved to participate in promotions' }, net_item_sold_periodic_promotions: { type: integer, example: 0, description: 'net item sold in periodic pricing promotions پروموشن های زمان دار' }, net_item_sold_incredible_promotions: { type: integer, example: 0, description: 'net item sold in incredible offer promotions پیشنهاد شگفت انگیز' }, net_item_sold_mega_promotions: { type: integer, example: 0, description: 'net item sold in mega campaign promotions مگا کمپین ها' }, net_item_sold_selling_and_sales_promotions: { type: integer, example: 0 }, count_variants: { type: integer, example: 101, description: 'all seller variants (active and inactive)' }, count_live_variants: { type: integer, example: 0, description: 'all seller active and sellable variants (have selling-stock)' }, count_deactive_variants: { type: integer, example: 101, description: 'all seller out of stock variants(active and inactive)' }, count_variants_having_sales: { type: integer, example: 12, description: 'all seller variants that have at least one sale' }, net_item_sold_click_campaigns: { type: integer, example: 123, description: 'net item sold in click campaign promotions تبلیغات کلیکی' } } }, old_sum: { type: object, description: 'summation of each data item for previous time range (if you select last-7-days, it will show data of last-7-days of last-7-days :))', properties: { gross_sales_amount: { type: integer, example: 0, description: 'seller gross sale (IRR)' }, gross_item_sold: { type: integer, example: 0, description: 'seller gross item sold' }, conversion_rate: { type: integer, example: 0, description: 'amount of item sold / visit count' }, visit_count: { type: integer, example: 0, description: 'visit amount of seller products' }, approved_promotion_participation: { type: integer, example: 2, description: 'number of variants that approved to participate in promotions' }, net_item_sold_periodic_promotions: { type: integer, example: 0, description: 'net item sold in periodic pricing promotions پروموشن های زمان دار' }, net_item_sold_incredible_promotions: { type: integer, example: 0, description: 'net item sold in incredible offer promotions پیشنهاد شگفت انگیز' }, net_item_sold_mega_promotions: { type: integer, example: 0, description: 'net item sold in mega campaign promotions مگا کمپین ها' }, net_item_sold_selling_and_sales_promotions: { type: integer, example: 0 }, count_variants: { type: integer, example: 101, description: 'all seller variants (active and inactive)' }, count_live_variants: { type: integer, example: 0, description: 'all seller active and sellable variants (have selling-stock)' }, count_deactive_variants: { type: integer, example: 101, description: 'all seller out of stock variants(active and inactive)' }, count_variants_having_sales: { type: integer, example: 12, description: 'all seller variants that have at least one sale' }, net_item_sold_click_campaigns: { type: integer, example: 123, description: 'net item sold in click campaign promotions تبلیغات کلیکی' } } }, avg: { type: object, description: 'average of each data item in selected time range', properties: { gross_sales_amount: { type: double, example: 0, description: 'seller gross sale (IRR)' }, gross_item_sold: { type: double, example: 0, description: 'seller gross item sold' }, conversion_rate: { type: double, example: 0, description: 'amount of item sold / visit count' }, visit_count: { type: double, example: 0, description: 'visit amount of seller products' }, approved_promotion_participation: { type: double, example: 2, description: 'number of variants that approved to participate in promotions' }, net_item_sold_periodic_promotions: { type: double, example: 0, description: 'net item sold in periodic pricing promotions پروموشن های زمان دار' }, net_item_sold_incredible_promotions: { type: double, example: 0, description: 'net item sold in incredible offer promotions پیشنهاد شگفت انگیز' }, net_item_sold_mega_promotions: { type: double, example: 0, description: 'net item sold in mega campaign promotions مگا کمپین ها' }, net_item_sold_selling_and_sales_promotions: { type: double, example: 0 }, count_variants: { type: double, example: 101, description: 'all seller variants (active and inactive)' }, count_live_variants: { type: double, example: 0, description: 'all seller active and sellable variants (have selling-stock)' }, count_deactive_variants: { type: double, example: 101, description: 'all seller out of stock variants(active and inactive)' }, count_variants_having_sales: { type: double, example: 12, description: 'all seller variants that have at least one sale' }, net_item_sold_click_campaigns: { type: double, example: 123, description: 'net item sold in click campaign promotions تبلیغات کلیکی' } } }, old_avg: { type: object, description: 'average of the data for previous selected time range (if you select last-7-days, it will show data of last-7-day of last-7-day :))', properties: { gross_sales_amount: { type: double, example: 0, description: 'seller gross sale (IRR)' }, gross_item_sold: { type: double, example: 0, description: 'seller gross item sold' }, conversion_rate: { type: double, example: 0, description: 'amount of item sold / visit count' }, visit_count: { type: double, example: 0, description: 'visit amount of seller products' }, approved_promotion_participation: { type: double, example: 2, description: 'number of variants that approved to participate in promotions' }, net_item_sold_periodic_promotions: { type: double, example: 0, description: 'net item sold in periodic pricing promotions پروموشن های زمان دار' }, net_item_sold_incredible_promotions: { type: double, example: 0, description: 'net item sold in incredible offer promotions پیشنهاد شگفت انگیز' }, net_item_sold_mega_promotions: { type: double, example: 0, description: 'net item sold in mega campaign promotions مگا کمپین ها' }, net_item_sold_selling_and_sales_promotions: { type: double, example: 0 }, count_variants: { type: double, example: 101, description: 'all seller variants (active and inactive)' }, count_live_variants: { type: double, example: 0, description: 'all seller active and sellable variants (have selling-stock)' }, count_deactive_variants: { type: double, example: 101, description: 'all seller out of stock variants(active and inactive)' }, count_variants_having_sales: { type: double, example: 12, description: 'all seller variants that have at least one sale' }, net_item_sold_click_campaigns: { type: double, example: 123, description: 'net item sold in click campaign promotions تبلیغات کلیکی' } } }, progress: { type: object, description: 'show time range progress of each item in percentage', properties: { gross_sales_amount: { type: double, example: 0, description: 'seller gross sale (IRR)' }, gross_item_sold: { type: double, example: 0, description: 'seller gross item sold' }, conversion_rate: { type: double, example: 0, description: 'amount of item sold / visit count' }, visit_count: { type: double, example: 0, description: 'visit amount of seller products' }, approved_promotion_participation: { type: double, example: 2, description: 'number of variants that approved to participate in promotions' }, net_item_sold_periodic_promotions: { type: double, example: 0, description: 'net item sold in periodic pricing promotions پروموشن های زمان دار' }, net_item_sold_incredible_promotions: { type: double, example: 0, description: 'net item sold in incredible offer promotions پیشنهاد شگفت انگیز' }, net_item_sold_mega_promotions: { type: double, example: 0, description: 'net item sold in mega campaign promotions مگا کمپین ها' }, net_item_sold_selling_and_sales_promotions: { type: double, example: 0 }, count_variants: { type: double, example: 101, description: 'all seller variants (active and inactive)' }, count_live_variants: { type: double, example: 0, description: 'all seller active and sellable variants (have selling-stock)' }, count_deactive_variants: { type: double, example: 101, description: 'all seller out of stock variants(active and inactive)' }, count_variants_having_sales: { type: double, example: 12, description: 'all seller variants that have at least one sale' }, net_item_sold_click_campaigns: { type: double, example: 123, description: 'net item sold in click campaign promotions تبلیغات کلیکی' } } }, avg_progress: { type: object, description: 'show time range progress of each item in percentage for previous time range (if you select last-7-days, it will show data of last-7-days of last-7-days :))', properties: { gross_sales_amount: { type: double, example: 0, description: 'seller gross sale (IRR)' }, gross_item_sold: { type: double, example: 0, description: 'seller gross item sold' }, conversion_rate: { type: double, example: 0, description: 'amount of item sold / visit count' }, visit_count: { type: double, example: 0, description: 'visit amount of seller products' }, approved_promotion_participation: { type: double, example: 2, description: 'number of variants that approved to participate in promotions' }, net_item_sold_periodic_promotions: { type: double, example: 0, description: 'net item sold in periodic pricing promotions پروموشن های زمان دار' }, net_item_sold_incredible_promotions: { type: double, example: 0, description: 'net item sold in incredible offer promotions پیشنهاد شگفت انگیز' }, net_item_sold_mega_promotions: { type: double, example: 0, description: 'net item sold in mega campaign promotions مگا کمپین ها' }, net_item_sold_selling_and_sales_promotions: { type: double, example: 0 }, count_variants: { type: double, example: 101, description: 'all seller variants (active and inactive)' }, count_live_variants: { type: double, example: 0, description: 'all seller active and sellable variants (have selling-stock)' }, count_deactive_variants: { type: double, example: 101, description: 'all seller out of stock variants(active and inactive)' }, count_variants_having_sales: { type: double, example: 12, description: 'all seller variants that have at least one sale' }, net_item_sold_click_campaigns: { type: double, example: 123, description: 'net item sold in click campaign promotions تبلیغات کلیکی' } } } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/insight/top-deactivated: { get: { tags: ['Insight (5)'], summary: 'Scopes => insight', description: 'Get seller''s insight overview list for each day.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: InsightTopDeactivatedListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'acs or desc', example: asc }, sort_columns: { type: array, description: 'name of sort columns', example: [id] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 50 }, total_pages: { type: integer, description: 'number of total pages' }, total_rows: { type: integer, description: 'number of total rows' } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { product_id: { type: integer, example: 1234, description: 'product id' }, category_id: { type: integer, example: 12345, description: 'leaf category id' }, main_category_id: { type: integer, example: 1, description: 'product main category id (not leaf)' }, gross_amount: { type: integer, example: 47712600, description: 'total missed revenue if the product was live' }, product_title: { type: string, example: 'کتاب مرگ', description: 'product title' }, view_count: { type: integer, example: 190, description: 'total customer view of product' }, impression_count: { type: integer, example: 203, description: 'total customer impression for the product' }, notification_count: { type: integer, example: 8, description: 'number of customers that tagged product for notification' }, product_image: { type: string, example: 'http://dkstatics-public.digikala.com/digikala-products/c5f1c609f156ec062047b608deee9_1658322173.jpg', description: 'product main image - small' }, category_title: { type: string, example: 'کتاب شعر و ادبیات', description: 'leaf category title in FA' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/insight/trend-sales-reports: { get: { tags: ['Insight (5)'], summary: 'Scopes => insight', description: 'Get trend sales reports', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: range, description: 'Time range of report calculation', required: true, example: last_7_days, schema: { type: string, enum: [last_7_days, last_14_days, last_30_days, before_last_14_days] } }, { in: query, name: category_id, description: 'one of seller product categories', required: false, example: 123, schema: { type: integer } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: InsightTrendSalesReportsListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { net_sales: { type: object, description: 'seller net sale amount', properties: { amount: { type: integer, example: 0 }, percentage: { type: integer, example: -100 } } }, net_item_sold: { type: object, description: 'count of seller sold items', properties: { count: { type: integer, example: 0 }, percentage: { type: integer, example: -100 } } }, visit_count: { type: object, description: 'summation of customer visit times of seller products', properties: { count: { type: integer, example: 673682 }, percentage: { type: double, example: -6.22 } } }, satisfaction: { type: object, description: 'customer satisfaction rate of seller products', properties: { amount: { type: [string, integer], example: Infinity }, percentage: { type: [string, integer], example: Infinity } } }, order_count: { type: object, description: 'order amount of seller', properties: { count: { type: integer, example: 0 }, percentage: { type: integer, example: -100 } } }, net_sales_credit_method: { type: object, description: 'net sales amount using selling with credit method', properties: { amount: { type: integer, example: 0 }, percentage: { type: integer, example: 0 } } }, chart: { type: array, description: 'some data measured per date', items: { type: object, properties: { marketplace_seller_id: { type: integer, example: 12345, description: 'seller id' }, date: { type: string, example: '2024-08-07T00:00:00', description: 'date of the data' }, net_sales_amount: { type: integer, example: 1000, description: 'sum of selling revenue (net)' }, net_item_sold: { type: integer, example: 1, description: 'count of item sold (net)' }, gross_sales_amount: { type: integer, example: 10000, description: 'sum of selling revenue (gross)' }, gross_item_sold: { type: integer, example: 2, description: 'count of item sold (gross)' }, visit_count: { type: integer, example: 137402, description: 'total customer visit of seller products' }, order_count: { type: integer, example: 12, description: 'total order number of seller products' }, main_category_id: { type: integer, example: 1, description: '' }, product_satisfaction_numerator: { type: integer, example: 0, description: '' }, product_satisfaction_denominator: { type: integer, example: 0, description: '' }, product_satisfaction_rate: { type: integer, example: 12, description: '' }, net_sales_amount_credit_method: { type: integer, example: 12, description: '' }, net_item_sold_credit_method: { type: integer, example: 12, description: '' } } } }, chart_avg: { type: object, properties: { net_sales_amount: { type: integer, example: 1000, description: 'sum of selling revenue (net)' }, net_item_sold: { type: integer, example: 1, description: 'count of item sold (net)' }, gross_sales_amount: { type: integer, example: 10000, description: 'sum of selling revenue (gross)' }, gross_item_sold: { type: integer, example: 2, description: 'count of item sold (gross)' }, visit_count: { type: integer, example: 137402, description: 'total customer visit of seller products' }, order_count: { type: integer, example: 12, description: 'total order number of seller products' }, main_category_id: { type: integer, example: 0, description: '' }, product_satisfaction_numerator: { type: integer, example: 0, description: '' }, product_satisfaction_denominator: { type: integer, example: 0, description: '' }, product_satisfaction_rate: { type: integer, example: 0, description: '' }, net_sales_amount_credit_method: { type: integer, example: 0, description: '' }, net_item_sold_credit_method: { type: integer, example: 0, description: '' } } } } } }, meta_data: { type: object, description: 'meta data', properties: { categories: { type: object, properties: { 114: { type: string, example: 'کتاب آموزش عکاسی و راهنمای دوربین' }, 150: { type: string, example: 'فیلم سینمایی' } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/insight/sales-reports: { get: { tags: ['Insight (5)'], summary: 'Scopes => insight', description: 'Get sales reports', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: range, description: 'report time range', required: true, example: last_7_days, schema: { type: string, enum: [last_7_days, last_14_days, last_30_days, before_last_14_days] } }, { in: query, name: category_id, description: 'filter based on category Id', required: false, example: null, schema: { type: integer } }, { in: query, name: net_item_sold_from, description: 'filter based on net-item-sold range', required: false, example: null, schema: { type: integer } }, { in: query, name: net_item_sold_to, description: 'filter based on net-item-sold range', required: false, example: null, schema: { type: integer } }, { in: query, name: net_sales_amount_from, description: 'filter based on net-sales-amount range', required: false, example: null, schema: { type: float } }, { in: query, name: net_sales_amount_to, description: 'filter based on net-sales-amount range', required: false, example: null, schema: { type: float } }, { in: query, name: search_field, description: 'filter based on Product id or name', required: false, example: null, schema: { type: 'string,integer' } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: InsightSalesReportsListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { product_id: { type: integer, example: 1234, description: 'product id' }, net_sales_amount: { type: integer, example: 1000, description: 'sum of selling revenue (net)' }, net_item_sold: { type: integer, example: 1, description: 'count of item sold (net)' }, gross_sales_amount: { type: integer, example: 10000, description: 'sum of selling revenue (gross)' }, gross_item_sold: { type: integer, example: 2, description: 'count of item sold (gross)' }, visit_count: { type: integer, example: 137402, description: 'total customer visit of seller products' }, order_count: { type: integer, example: 12, description: 'total order number of seller products' }, main_category_id: { type: integer, example: 8, description: 'main category id (not leaf)' }, category_id: { type: integer, example: 123, description: 'leaf category id' }, conversion_rate: { type: double, example: 12.5, description: 'conversion rate (visits per sells) of the product' }, title: { type: string, example: 'کتاب ایکس و ایگرگ', description: 'product title' }, category_title: { type: string, example: 'کتاب زندگینامه', description: 'leaf category title' }, image: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-products/bf8580091ebb9b05ae74c40f8571a8e_1621778302.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60', description: 'product main image - small' } } } }, meta_data: { type: object, description: 'meta data', properties: { categories: { type: object, description: 'list of seller product categories. (key is category id and value is category title)', properties: { 114: { type: string, example: 'کتاب آموزش عکاسی و راهنمای دوربین', description: 'category title' } } } } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/insight/overview/export: { post: { tags: ['Insight (5)'], summary: 'Scopes => insight', description: 'Export insight overview. This will send excel file download link to <b>Seller Email</b> address', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: InsightOverviewExcelExportForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { message: { type: string, description: 'success message', example: 'لینک گزارش درخواستی تا دقایقی دیگر به ایمیل ثبت شده‌ی شما ارسال می‌شود.' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/lightening-deal/products: { get: { tags: ['Lightening (9)'], summary: 'Scopes => lightening_deal', description: 'List of seller products to choose from for lightening deal. ', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 10 } }, { in: query, name: sort, description: 'Define list sort column. can be bestSeller | mostViewed | mostStock | userDemanded | latest', required: false, example: null, schema: { type: enum, default: latest } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: desc } }, { in: query, name: 'search[q]', description: 'The search Keyword to lookup in product titles, can be a dkp or dkpc. ', required: false, example: null, schema: { type: string, default: '' } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: LighteningDealProductListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, example: 1234, description: 'product id' }, title_fa: { type: string, example: 'کتاب چگونه', description: 'product name in FA' }, title_en: { type: string, example: book, description: 'product name in EN' }, image: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-products/420ae4cfc7cb8fcea299e90d2b7d_1689494808.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60', description: 'product main image - mini size' }, price: { type: integer, example: 10000, description: 'product selling price' }, views: { type: integer, example: 123, description: 'amount of product customer view in last 7 days' }, orders: { type: integer, example: 123, description: 'amount of product orders in last 7 days' }, seller_id: { type: integer, example: 1234, description: 'your seller id' }, disabled: { type: boolean, example: true, description: 'is it disable for Lightening deal or not' }, validationMessages: { type: array, description: 'list of validation messages for products that shows why its disabled for lightening deal', items: { type: string, description: 'validation message', example: 'عدم موجودی' } }, stock: { type: integer, example: 4, description: 'total product selling stock' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/lightening-deal/products/{product_id}': { get: { tags: ['Lightening (9)'], summary: 'Scopes => lightening_deal', description: 'Get a list of product variants for a seller based on the product ID.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: path, name: product_id, description: null, required: true, example: null, schema: { type: null } }, { in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 2000 } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: LighteningDealProductVariantListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { id: { type: integer, example: 123456, description: 'product variant id' }, product_id: { type: integer, example: 12345, description: 'product id' }, category_id: { type: integer, example: 123, description: 'leaf category id' }, title: { type: string, example: 'کتاب جادوگر', description: 'product variant title in FA' }, image: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-products/3abc96f0a4f6e9d6027b97e72d_1688993101.jpg?x-oss-process=image/resize,m_lfit,h_240,w_240/quality,q_80', description: 'product main image url - mini' }, stock: { type: integer, example: 4, description: 'total product variant stock' }, has_stock: { type: boolean, example: true, description: 'has product selling stock or not' }, max_send_to_warehouse: { type: integer, example: 2, description: 'the maximum stock amount that seller can send to DK warehouse for this Lightening deal' }, min_discount: { type: integer, example: 20, description: 'minimum discount that seller must put on the lightening deal bid' }, max_allowable_price: { type: integer, example: 1230000, description: 'maximum selling price that is allowable to participate this product variant in lightening deal' }, price: { type: integer, example: 123000, description: 'product selling price' }, views: { type: integer, example: 123, description: 'amount of product customer view in last 7 days' }, orders: { type: integer, example: 123, description: 'amount of product orders in last 7 days' } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/lightening-deal/promotions: { get: { tags: ['Lightening (9)'], summary: 'Scopes => lightening_deal', description: 'Get a list of lightening deal promotions per date.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: LighteningDealPromotionsListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: {  } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/lightening-deal/promotions/{productId}': { get: { tags: ['Lightening (9)'], summary: 'Scopes => lightening_deal', description: 'Get a list of lightening deal promotions that are available for specified product ID.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: LighteningDealValidatedPromotionsListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { startDate: { type: string, example: 1403/06/11, description: 'the Solar date of the promotions' }, day: { type: integer, example: 11, description: 'the day of the solar date' }, month: { type: string, example: شهریور, description: 'the month name of the solar date' }, year: { type: integer, example: 1403, description: 'the year of the solar date' }, weekdayName: { type: string, example: یکشنبه, description: 'the week-day of the solar date' }, dayOfWeek: { type: integer, example: 1, description: 'the week-day number of the solar date' }, message: { type: string, example: '', description: 'if there is any extra message to show, it will be here' }, timeslots: { type: object, description: 'list of available promotions in this date', properties: { 123456789: { type: object, description: 'promotion detail. (key is promotion id and value is promotion detail', properties: { startAt: { type: string, example: '2024-09-01 00:00:00', description: 'starting datetime of promotion' }, endAt: { type: string, example: '2024-09-01 08:00:00', description: 'ending datetime of promotion' }, startAtTime: { type: string, example: '00:00', description: 'starting time (only time format) of promotion' }, endAtTime: { type: string, example: '08:00', description: 'ending time (only time format) of promotion' }, promotionId: { type: integer, example: 123456789, description: 'promotion id' }, bidCount: { type: integer, example: 76, description: 'number of bids put by other sellers until now' }, maxBid: { type: integer, example: 20000000, description: 'maximum possible bid (in IRR) for this promotion' }, minBidToWin: { type: integer, example: 10000000, description: 'offers (in IRR) upper that this value will win the bid for this promotion' }, minAllowableBid: { type: integer, example: 10000000, description: 'minimum allowable bid for this promotion' }, maxAllowableBid: { type: integer, example: 30000000, description: 'maximum allowable bid for this promotion' } } } } } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/lightening-deal/bids: { post: { tags: ['Lightening (9)'], summary: 'Scopes => lightening_deal', description: 'Create new lightening deal bid.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { bidsData: { type: array } }, required: [bidsData] }, example: {  } } } }, responses: { 200: { description: LighteningDealCreateBidForm, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (ok, error)', example: ok }, data: { type: object, properties: { chargeWallet: { type: boolean, example: true, description: 'is this bid get paid by seller wallet or not' }, totalBIdsPrice: { type: integer, example: 10000000, description: 'total amount (IRR) of the bids seller created' }, productVariantsCount: { type: integer, example: 1, description: 'count of product variants that been added to lightening deal' }, promotionsCount: { type: integer, example: 1, description: 'count of lightening deal promotions participated' }, totalPrice: { type: integer, example: 10000000, description: 'total amount (IRR) of the bids' }, totalPriceWallet: { type: integer, example: 10000000, description: 'total amount (IRR) of the bids that payed by seller wallet' }, totalPriceCredit: { type: integer, example: 0, description: 'total amount (IRR) of the bids that payed by seller credit' }, variantQuantity: { type: integer, example: 1, description: 'count of product variants that been added to lightening deal' }, promotionsQuantity: { type: integer, example: 1, description: 'count of lightening deal promotions participated' } } } } } } } }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { bidsData: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false }, get: { tags: ['Lightening (9)'], summary: 'Scopes => lightening_deal', description: 'List of seller Lightening deal bids. ', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: query, name: page, description: 'Number of page.', required: false, example: null, schema: { type: integer, default: 1 } }, { in: query, name: size, description: 'List page size.', required: false, example: null, schema: { type: integer, default: 10 } }, { in: query, name: sort, description: 'Define list sorting.', required: false, example: null, schema: { type: string, default: id, enum: [id] } }, { in: query, name: order, description: 'Define list sort order.', required: false, example: null, schema: { type: string, default: desc } }, { in: query, name: 'search[status]', description: 'filter results by status.', required: false, example: null, schema: { type: string, default: '', enum: [all, pending, payment, productSupply, approvedWinner, live, ended, lost] } }, { in: query, name: 'search[startDate]', description: 'Timestamp in milliseconds', required: false, example: null, schema: { type: integer, default: '' } }, { in: query, name: 'search[endDate]', description: 'Timestamp in milliseconds', required: false, example: null, schema: { type: integer, default: '' } }, { in: query, name: 'search[q]', description: 'Product or product variant ID to use when querying', required: false, example: null, schema: { type: string, default: '' } }, { in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: LighteningDealBidsListView, content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'request status', example: ok }, data: { type: object, description: 'data of request', properties: { sort_data: { type: object, description: 'data about sorting things', properties: { sort_column: { type: string, description: 'name of sort column', example: id }, sort_order: { type: string, description: 'asc or desc', example: asc }, sort_columns: { type: string, description: 'name of sort columns', example: [id, created_at, status] } } }, pager: { type: object, description: 'data about pager things', properties: { page: { type: integer, description: 'page number', example: 1 }, item_per_page: { type: integer, description: 'number of item per page', example: 10 }, total_pages: { type: integer, description: 'number of total pages', example: 100 }, total_rows: { type: integer, description: 'number of total rows', example: 100 } } }, form_data: { type: array, items: {  } }, items: { type: array, description: 'items of view', items: { type: object, properties: { promotionId: { type: integer, example: 12345, description: 'lightening deal promotion id' }, bidId: { type: integer, example: 123456, description: 'lightening deal bid id' }, dkp: { type: integer, example: 1234, description: 'product id' }, productId: { type: integer, example: 1234, description: 'product id' }, date: { type: object, description: '', properties: { day: { type: integer, example: 11, description: 'the day of the solar date' }, month: { type: string, example: شهریور, description: 'the month name of the solar date' }, weekdayName: { type: string, example: یکشنبه, description: 'the week-day of the solar date' }, start: { type: string, example: '2024-09-01 00:00:00', description: 'starting datetime of promotion' }, end: { type: string, example: '2024-09-01 08:00:00', description: 'ending datetime of promotion' }, startHour: { type: string, example: '00:00', description: 'starting time (only time format) of promotion' }, endHour: { type: string, example: '08:00', description: 'ending time (only time format) of promotion' } } }, remainingTime: { type: object, description: 'object that shows remaining time to promotion', properties: { days: { type: integer, example: 0, description: 'remaining days' }, hours: { type: integer, example: 20, description: 'remaining hours' }, minutes: { type: integer, example: 1, description: 'remaining minutes' } } }, bidCount: { type: integer, example: 77, description: 'number of bids by other sellers' }, minBid: { type: integer, example: 1000000, description: 'minimum allowable bid amount (IRR)' }, maxBid: { type: integer, example: 10000000, description: 'maximum bid till now' }, autoRaise: { type: integer, example: 3, description: 'how much percent raise the bid amount if the mixBid to win raised by others, automatically?' }, finalBidAmount: { type: integer, example: 0, description: 'the last maximum bid before it get closed' }, status: { type: string, example: pending, description: 'bid status', enum: [all, pending, payment, productSupply, approvedWinner, live, ended, lost] }, paymentMethod: { type: string, example: wallet, description: 'bid payment method', enum: [wallet, credit, seller_credit, payment_method_seller_credit, payment_method_wallet] }, isPaymentMethodEditable: { type: boolean, example: true, description: obvious }, availablePaymentMethods: { type: array, description: 'list of available payment methods (if it is editable)', items: { type: string, example: wallet, enum: [wallet, credit, seller_credit, payment_method_seller_credit, payment_method_wallet] } }, productVariants: { type: array, description: '', items: { type: object, properties: { title: { type: string, example: 'کتاب جادوگر', description: 'product variant title in FA' }, productVariantId: { type: integer, example: 12345, description: 'product variant id' }, dkpc: { type: integer, example: 12345, description: 'product variant id' }, price: { type: integer, example: 2300000, description: 'variant selling price' }, promotionPrice: { type: integer, example: 1727000, description: 'variant selling price in promotion' }, offPercent: { type: integer, example: 24, description: 'variant discount percentage in promotion' }, numberOfVariantsInPromotion: { type: integer, example: 4, description: 'total stock of variant that is sellable in promotion' }, remainingNumberOfVariantsInPromotion: { type: integer, example: 4, description: 'remaining stock of variant in promotion' }, numberOfVariantsSoldInPromotion: { type: integer, example: 0, description: 'sold stock of variant in promotion' }, revenue: { type: integer, example: 0, description: 'total revenue of selling variant in promotion' }, image: { type: string, example: 'https://dkstatics-public.digikala.com/digikala-products/3bc6e9d6027b97e72d_1688993101.jpg?x-oss-process=image/resize,m_lfit,h_115,w_115/quality,q_60', description: 'product main image - mini' } } } } } } }, meta_data: { type: object, description: 'meta data', properties: {  } } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    /api/v3/lightening-deal/bidsSummary: { get: { tags: ['Lightening (9)'], summary: 'Scopes => lightening_deal', description: 'show lightening deal statistics per their status', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: null, responses: { 200: { description: LighteningDealBidsSummaryObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { pending: { type: integer, example: 1, description: 'count of lightening deal bids in pending status (wait for approval)' }, payment: { type: integer, example: 0, description: 'count of lightening deal bids in payment status (not paid yet)' }, productSupply: { type: integer, example: 0, description: 'count of lightening deal bids in productSupply status' }, approvedWinner: { type: integer, example: 0, description: 'count of lightening deal bids in approvedWinner status (approved and ready to get live on time)' }, live: { type: integer, example: 0, description: 'count of lightening deal bids in live status (approved and live on DK Amazing page)' }, ended: { type: integer, example: 0, description: 'count of lightening deal bids in ended status (promotion time has been ended)' }, lost: { type: integer, example: 0, description: 'count of lightening deal bids in lost status' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/lightening-deal/check-duplicate-dkp-in-promotion/{promotionId}/{productId}': { get: { tags: ['Lightening (9)'], summary: 'Scopes => lightening_deal', description: 'Check if seller has same product in same promotion or not to prevent duplicate product bids', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { promotionId: { type: integer, description: 'promotion id' }, productId: { type: integer, description: 'product id' } }, required: [promotionId, productId] }, example: {  } } } }, responses: { 200: { description: LighteningDealDuplicateBidVariantObjectView, content: { application/json: { schema: { type: object, properties: { status: { type: integer, description: 'status code', example: ok }, data: { type: object, description: 'data that returned from API', properties: { message: { type: string, description: 'if there is any duplicate product in same promotion, this message will be shown', example: 'کالای انتخابی در این بازه مزایده  شگفت انگیز فعال دارد و امکان ساخت مزایده جدید وجود ندارد' } } } } } } } }, 400: { description: 'Validation error! check your inputs.' }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
    '/api/v3/lightening-deal/bids/{bidId}/payment-method': { post: { tags: ['Lightening (9)'], summary: 'Scopes => lightening_deal', description: 'change lightening deal bid payment method to wallet/credit.', parameters: [{ in: header, name: 'x-response-code', required: true, schema: { default: 200 } },{ in: header, name: content-type, required: true, schema: { default: application/json } }], requestBody: { required: true, content: { application/json: { schema: { type: object, properties: { paymentMethod: { type: string, description: 'payment method' } }, required: [paymentMethod] }, example: {  } } } }, responses: { 200: { description: LighteningDealChangePaymentMethodForm }, 400: { description: 'Validation error! check your inputs.', content: { application/json: { schema: { type: object, properties: { status: { type: string, description: 'Response status (error)', example: error }, code: { type: integer, description: 'Http status code', example: 400 }, message: { type: string, description: 'General Error Message', example: 'Validation failed' }, errors: { type: object, description: 'Response Data', properties: { paymentMethod: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } }, bidId: { type: array, description: 'input that faced error', items: { type: string, description: 'error message', example: 'این قسمت نباید خالی باشد' } } } } } } } } }, 401: { description: 'Your access is denied. We can not authorize you. Please get a new access_token.!' }, 403: { description: 'Your access is denied. Maybe you should ask a new permission!' }, 404: { description: 'Data is not exist for your request.' }, 429: { description: 'You reached request limit amount. try again after reset_time' }, 500: { description: 'Server Issue. Contact with support team' } }, deprecated: false } }
tags:
    Healthcheck: { name: 'Healthcheck (1)', count: 1, count_new: 0 }
    Authentication: { name: 'Authentication (5)', count: 5, count_new: 0 }
    Product: { name: 'Product (30)', count: 30, count_new: 0 }
    'Product Variant': { name: 'Product Variant (13)', count: 13, count_new: 0 }
    Order: { name: 'Order (9)', count: 9, count_new: 0 }
    Inventories: { name: 'Inventories (4)', count: 4, count_new: 0 }
    Package: { name: 'Package (11)', count: 11, count_new: 0 }
    Shipments: { name: 'Shipments (5)', count: 5, count_new: 0 }
    Profile: { name: 'Profile (9)', count: 9, count_new: 0 }
    'Questions & Answers': { name: 'Questions & Answers (3)', count: 3, count_new: 0 }
    Insight: { name: 'Insight (5)', count: 5, count_new: 0 }
    Lightening: { name: 'Lightening (9)', count: 9, count_new: 0 }
components:
    securitySchemes: { bearerAuth: { type: http, scheme: bearer, bearerFormat: JWT } }
    schemas: { 401: { type: object, properties: { status: { type: string, description: 'response status', example: error }, message: { type: string, description: 'error message', example: 'Invalid token!' }, code: { type: integer, description: 'Response HTTP Status Code', example: 401 } } }, 403: { type: object, properties: { status: { type: string, description: 'response status', example: error }, message: { type: string, description: 'error message', example: 'Insufficient Scopes!' }, code: { type: integer, description: 'Response HTTP Status Code', example: 403 } } }, 404: { type: object, properties: { status: { type: string, description: 'response status', example: error }, message: { type: string, description: 'error message', example: 'requested data does not exist' }, code: { type: integer, description: 'Response HTTP Status Code', example: 404 } } }, 429: { type: object, properties: { status: { type: string, description: 'response status', example: error }, message: { type: string, description: 'error message', example: 'Too Many Requests from 192.168.1.1 Try again soon.' }, code: { type: integer, description: 'Response HTTP Status Code', example: 429 } } }, 500: { type: object, properties: { status: { type: string, description: 'response status', example: error }, message: { type: string, description: 'error message', example: 'مشکلی در سرور وجود دارد' }, code: { type: integer, description: 'Response HTTP Status Code', example: 150000001 } } } }
security:
    - { bearerAuth: {  } }
